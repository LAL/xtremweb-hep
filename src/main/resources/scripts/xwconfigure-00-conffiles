#!/bin/sh
#=============================================================================
# Copyrights     : CNRS
# Authors        : Oleg Lodygensky, Etienne Urbah
# Acknowledgment : XtremWeb-HEP is based on XtremWeb 1.8.0 by INRIA : http://www.xtremweb.net/
# Web            : http://www.xtremweb-hep.org
# 
#      This file is part of XtremWeb-HEP.
#
#    XtremWeb-HEP is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    XtremWeb-HEP is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with XtremWeb-HEP.  If not, see <http://www.gnu.org/licenses/>.
#=============================================================================

#=============================================================================
#
# File :      xwconfigure-00-conffiles
#
# Purpose :   xwconfigure became too complex; it has been split 
#             into several scripts
#             this scripts installs configuration files only using parameters 
#             read from xwconfigure.values
#
# Requirements: xwconfigure.values must be manually filled
#             
# 2017-12-11  Oleg Lodygensky :
#             -  1st version
#
#=============================================================================


#=============================================================================
# Some variables
#=============================================================================
ROOTDIR=`dirname $0`
echo $ROOTDIR | grep -E "^./.*" > /dev/null  2>&1
[ $? -eq 0 ] && ROOTDIR=`pwd`/$ROOTDIR
currentDir=`pwd`
cd $ROOTDIR/..
ROOTDIR=`pwd`
cd $currentDir

VERSION=%XWVERSION%
INSTALLDIR=%INSTALLDIR%

BINDIR=$ROOTDIR/bin
CONFDIR=$ROOTDIR/conf
DOCDIR=$ROOTDIR/doc
INSTALLERSDIR=$ROOTDIR/installers
KEYSTOREDIR=$ROOTDIR/keystore
LIBDIR=$ROOTDIR/lib
XWCONFVALUES=$CONFDIR/xwconfigure.values
#INITD="/etc/init.d"


GENKEYS=$BINDIR/xwhepgenkeys
OPENIDSH=$BINDIR/xwhepupdateopenidcerts

XWGMOND=$BINDIR/xtremweb.gmond.pl

XWSERVERCONFFILENAME=xtremweb.server.conf
XWCLIENTCONFFILENAME=xtremweb.client.conf
XWBRIDGECONFFILENAME=$XWCLIENTCONFFILENAME
XWCLIENTCONFTEMPLATEFILENAME=xtremweb.client.conf.template
XWWORKERCONFFILENAME=xtremweb.worker.conf
XWVWORKERCONFFILENAME=xtremweb.vworker.conf

XWSERVERCONFFILE=$CONFDIR/$XWSERVERCONFFILENAME
XWCLIENTCONFFILE=$CONFDIR/$XWCLIENTCONFFILENAME
XWBRIDGECONFFILE=$XWCLIENTCONFFILE
XWCLIENTCONFTEMPLATEFILE=$CONFDIR/$XWCLIENTCONFTEMPLATEFILENAME
XWWORKERCONFFILE=$CONFDIR/$XWWORKERCONFFILENAME
XWVWORKERCONFFILE=$CONFDIR/$XWVWORKERCONFFILENAME

SEDCMDS=$BINDIR/xwconfigure.seds

XWELECTRONICKEYS=""
XWSERVERKEYSTOREFILENAME=xwhepserver.keys
XWWORKERKEYSTOREFILENAME=xwhepworker.keys
XWCLIENTKEYSTOREFILENAME=xwhepclient.keys
XWBRIDGEKEYSTOREFILENAME=$XWCLIENTKEYSTOREFILENAME
XWCERTFILENAME=xwhepcert.pem

XWSERVERKEYSTOREFILE=$KEYSTOREDIR/$XWSERVERKEYSTOREFILENAME
XWWORKERKEYSTOREFILE=$KEYSTOREDIR/$XWWORKERKEYSTOREFILENAME
XWCLIENTKEYSTOREFILE=$KEYSTOREDIR/$XWCLIENTKEYSTOREFILENAME
XWBRIDGEKEYSTOREFILE=$XWCLIENTKEYSTOREFILE
XWCERTFILE=$KEYSTOREDIR/$XWCERTFILENAME


JETTY=$LIBDIR/jetty-server-9.3.8.v20160314.jar
JETTYUTIL=$LIBDIR/jetty-util-9.3.8.v20160314.jar
JETTYHTTP=$LIBDIR/jetty-http-9.3.8.v20160314.jar
JETTYIO=$LIBDIR/jetty-io-9.3.8.v20160314.jar
JETTYSERVLETAPI=$LIBDIR/servlet-api-3.1.jar

DEBIANVERSION="/etc/debian_version"
DEBIANOS=0
[ -f $DEBIANVERSION ] && DEBIANOS=1

REDHATVERSION="/etc/redhat-release"
REDHATOS=0
[ -f $REDHATVERSION ] && REDHATOS=1

MACVERSION='uname -s'
MACOS=0
[ "$MACVERSION" = "Darwin" ] && MACOS=1

PKGS="YES"
FORCEYES="NO"
KEEPDB="YES"
NEWKEYSTORE=0
NEWALIAS=0


#=============================================================================
# Function  fatal
#=============================================================================
fatal() {
	cat <<EOF

- * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! * -
[`date`] `basename $0` - FATAL : $*
- * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! * -
EOF
	
	exit 1
}


#=============================================================================
# Function  warning
#=============================================================================
warning() {
	cat <<EOF

- * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! * -
[`date`] `basename $0` - WARN : $*
- * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! * -
EOF
}


#=============================================================================
# Function  info
#=============================================================================
info() {
	cat <<EOF

- * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! * -
[`date`] `basename $0` - INFO : $*
- * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! * -
EOF
}


#=============================================================================
# Function  usage
#=============================================================================
usage() {
	msg=$1
	stopit=0
	
	if [ "$msg" = "STOP" ] ; then
		msg=""
		stopit=1
		help="HELP"
	fi
	if [ "$msg" = "HELP" ] ; then
		msg=""
		help="HELP"
	fi
	
	if [ -n "$msg" ] ; then
		cat <<EOF

- * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! * -
Error : $msg
- * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! * -
EOF
	fi
	
	cat <<EOF

--------------------------------------------------
         XtremWeb-HEP $VERSION 
         XWConfigurator

This script helps to configure an XtremWeb-HEP deployment 
--------------------------------------------------

This script aims to :
 - prepare configuration files
 - creates electronic keys : 
   * server private key
   * client key store including server public key
   * worker key store including server public key

All informations are read from $XWCONFVALUES

-----------------------------

EOF
	
	if [ -n "$help" ] ; then
		cat <<EOF

Usage : $0 [-h|--help|--h|-?] [-clean] [[--yes] [--newkeystore] [--newalias]]
    -h | --help | --h | -? : to get this help
    -clean  : to clean the distribution (remove packages etc.)
    --nopkg : to bypass installers
    --yes   : to force all answers to "yes" and/or to $XWCONFVALUES values
      Next are only used with "--yes"
      --newkeystore : to generate a new keystore
                      Be aware that this cancels any deployment
                      (all workers and clients must then be redeployed)
      --newalias    : to generate a new alias in existing keystore
                      This does not cancel existing deployment.
                      This is typically used to extend keystore validity
                      for an existing deployment.
EOF
	fi
	
	if [ -n "$msg" ] ; then
		cat <<EOF

- * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! * -
Error : $msg
- * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! * -
EOF
		shift
	fi
	
	[ $stopit -eq 1 ] && exit 1
	[ "$1" = "STOP" ] && exit 1
}


#=============================================================================
# Function  clean
#=============================================================================
clean() {
	printf "Cleaning keysotre : "
	
	
	if [ -f $XWSERVERKEYSTOREFILE ] ; then
		
		cat <<EOF

***************************************************
                     ATTENTION
***************************************************
  Keystores exist. If you delete keystores,
  you will have to redeploy all clients and workers
***************************************************
EOF
		
		YESNO="N"
		if [ "$FORCEYES" = "NO" ] ; then
			printf "Do you want to delete keystores [y/N] ? "
			read YESNO
		else
			YESNO="Y"
		fi
		
		if [ "$YESNO" = "y" -o "$YESNO" = "Y" ] ; then
			NEWKEYSTORE=1
		fi
	
	else
		NEWKEYSTORE=1
	fi
	
	if [ $NEWKEYSTORE -eq 1 ] ; then
		rm -f $KEYSTOREDIR/*.keys $KEYSTOREDIR/*.p12 $XWCERTFILE
	fi
	
	printf "."
	
	echo " Done"
	exit 0
}


#=============================================================================
#
# Main
#
#=============================================================================

while [ $# -gt 0 ]; do
	case $1 in
		"-h" | "--help" | "--h" | "-?" )
			usage "STOP"
			;;
		"-clean" )
			clean
			;;
		"--yes" )
			FORCEYES="YES"
			;;
		"--nopkg" )
			PKGS="NO"
			;;
		"--keepdb" )
			KEEPDB="YES"
			;;
		"--rmdb" )
			KEEPDB="NO"
			;;
		"--newkeystore" )
			NEWKEYSTORE=1
			;;
		"--newalias" )
			NEWKEYSTORE=0
			NEWALIAS=1
			echo "--rmkeystore : $KEEPKEYSTORE"
			;;
	esac
	shift
done

[ ! -d "$BINDIR" ]        && usage "File not found : $BINDIR ;  please reinstall the package" "STOP"
chmod -R 755 "$BINDIR"
chmod -x "$BINDIR"/*.seds "$BINDIR"/*.bat "$BINDIR"/*.xml
[ ! -d "$CONFDIR" ]       && usage "File not found : $CONFDIR ;  please reinstall the package" "STOP"
[ ! -d "$DOCDIR" ]        && usage "File not found : $DOCDIR ;  please reinstall the package" "STOP"
[ ! -d "$INSTALLERSDIR" ] && usage "File not found : $INSTALLERSDIR ;  please reinstall the package" "STOP"
[ ! -d "$KEYSTOREDIR" ]   && usage "File not found : $KEYSTOREDIR ;  please reinstall the package" "STOP"
[ ! -d "$LIBDIR" ]        && usage "File not found : $LIBDIR ;  please reinstall the package" "STOP"

# Test keytool
type keytool > /dev/null 2>&1 || usage "Keytool is not installed; please install it and/or correct your \$PATH env variable" "STOP"

# Test uuidgen
type uuidgen > /dev/null 2>&1 || usage "UUIDGEN is not installed; please install it and/or correct your \$PATH env variable. This can be found in package uuid-runtime (Debian)." "STOP"

# Test wget
WGET="wget --timeout=5 --tries=1 -o /dev/null -O /dev/null"
type wget > /dev/null  2>&1
if [ $? -ne 0 ] ; then
	usage "wget is not installed; please install it and/or correct your \$PATH env variable." "STOP"
fi

# Test zip
type zip > /dev/null  2>&1
if [ $? -ne 0 ] ; then
    usage "zip is not installed; please install it and/or correct your \$PATH env variable." "STOP"
fi

test -w $XWSERVERCONFFILE > /dev/null  2>&1
if [ $? -ne 0 ] ; then
	usage "Can't write $XWSERVERCONFFILE" "STOP"
fi
test -w $XWWORKERCONFFILE > /dev/null  2>&1
if [ $? -ne 0 ] ; then
	usage "Can't write $XWWORKERCONFFILE" "STOP"
fi
test -w $XWCLIENTCONFFILE > /dev/null  2>&1
if [ $? -ne 0 ] ; then
	usage "Can't write $XWCLIENTCONFFILE" "STOP"
fi
test -w $XWBRIDGECONFFILE > /dev/null  2>&1
if [ $? -ne 0 ] ; then
	usage "Can't write $XWBRIDGECONFFILE" "STOP"
fi

usage

if [ -f $XWCONFVALUES ] ; then
	. $XWCONFVALUES
else
	usage "Can't find $XWCONFVALUES" "STOP" 
fi


if [ -z "$XWUSER" ] ; then
	usage "Variable XWUSER not set; please correct $XWCONFVALUES file " "STOP" 
fi
if [ -z "$DBVENDOR" ] ; then
	usage "Variable DBVENDOR not set; please correct $XWCONFVALUES file " "STOP" 
fi
if [ -z "$DBENGINE" ] ; then
	usage "Variable DBENGINE not set; please correct $XWCONFVALUES file " "STOP" 
fi
if [ -z "$DBHOST" ] ; then
	usage "Variable DBHOST not set; please correct $XWCONFVALUES file " "STOP" 
fi
if [ -z "$DBADMINLOGIN" ] ; then
	usage "Variable DBADMINLOGIN not set; please correct $XWCONFVALUES file " "STOP" 
fi
if [ -z "$DBADMINPASSWORD" ] ; then
	usage "Variable DBADMINPASSWORD not set; please correct $XWCONFVALUES file " "STOP" 
fi
if [ -z "$DBNAME" ] ; then
	usage "Variable DBNAME not set; please correct $XWCONFVALUES file " "STOP" 
fi
if [ -z "$DBUSERLOGIN" ] ; then
	usage "Variable DBUSERLOGIN not set; please correct $XWCONFVALUES file " "STOP" 
fi
if [ -z "$DBUSERPASSWORD" ] ; then
	usage "Variable DBUSERPASSWORD not set; please correct $XWCONFVALUES file " "STOP" 
fi
if [ -z "$XWADMINLOGIN" ] ; then
	usage "Variable XWADMINLOGIN not set; please correct $XWCONFVALUES file " "STOP" 
fi
if [ -z "$XWADMINPASSWORD" ] ; then
	usage "Variable XWADMINPASSWORD not set; please correct $XWCONFVALUES file " "STOP" 
fi
if [ -z "$XWWORKERLOGIN" ] ; then
	usage "Variable XWWORKERLOGIN not set; please correct $XWCONFVALUES file " "STOP" 
fi
if [ -z "$XWWORKERPASSWORD" ] ; then
	usage "Variable XWWORKERPASSWORD not set; please correct $XWCONFVALUES file " "STOP" 
fi
if [ -z "$XWSERVER" ] ; then
	usage "Variable XWSERVER not set; please correct $XWCONFVALUES file " "STOP" 
fi
if [ -z "$SSLKEYPASSPHRASE" ] ; then
	usage "Variable SSLKEYPASSPHRASE not set; please correct $XWCONFVALUES file " "STOP" 
fi
if [ -z "$SSLKEYSERVERPASSWORD" ] ; then
	usage "Variable SSLKEYSERVERPASSWORD not set; please correct $XWCONFVALUES file " "STOP" 
fi
if [ -z "$SSLKEYWORKERPASSWORD" ] ; then
	usage "Variable SSLKEYWORKERPASSWORD not set; please correct $XWCONFVALUES file " "STOP" 
fi
if [ -z "$SSLKEYCLIENTPASSWORD" ] ; then
	usage "Variable SSLKEYCLIENTPASSWORD not set; please correct $XWCONFVALUES file " "STOP" 
fi
if [ -z "$X509CERTDIR" ] ; then
	usage "Variable X509CERTDIR not set; please correct $XWCONFVALUES file " "STOP" 
fi
if [ -z "$USERCERTDIR" ] ; then
	usage "Variable USERCERTDIR not set; please correct $XWCONFVALUES file " "STOP" 
fi
if [ -z "$XWUPGRADEURL" ] ; then
	usage "Variable XWUPGRADEURL not set; please correct $XWCONFVALUES file " "STOP" 
fi

echo "DB vendor forced to 'mysql'"
DBVENDOR='mysql'

echo "DB engine forced to 'InnoDB'" 
DBENGINE='InnoDB'



ls -l ${KEYSTOREDIR}/*.pem > /dev/null  2>&1
if [ $? -eq 0 ] ; then
	echo "***********************"
	echo " Electronic keys found "
	for p in `ls ${KEYSTOREDIR}/*.pem`; do 
		b=`basename "$p"`
		if [ $b = $XWCERTFILENAME ] ; then
			continue
		fi
		if [ ! -r $p ] ; then
			echo "*** [`date`] `basename $0` - ERROR: $p unreadable"
		else
			fn=`echo "$p" | sed "s/\.pem$//g"`
			k="${fn}.key"
			if [ ! -r $k ] ; then
				echo "*** [`date`] `basename $0` - ERROR: $p found, but $k unreadable"
			else
			    echo "*** [`date`] `basename $0` - INFO : Electronic key $p usable "
			    XWELECTRONICKEYS=$k
			fi
		fi
	done
	echo "***********************"
else
	if [ -z "$CERTCN" ] ; then
		usage "Variable CERTCN not set; please correct $XWCONFVALUES file " "STOP" 
	fi
	if [ -z "$CERTOU" ] ; then
		usage "Variable CERTOU not set; please correct $XWCONFVALUES file " "STOP" 
	fi
	if [ -z "$CERTO" ] ; then
		usage "Variable CERTO not set; please correct $XWCONFVALUES file " "STOP" 
	fi
	if [ -z "$CERTL" ] ; then
		usage "Variable CERTL not set; please correct $XWCONFVALUES file " "STOP" 
	fi
	if [ -z "$CERTC" ] ; then
		usage "Variable CERTC not set; please correct $XWCONFVALUES file " "STOP" 
	fi
	echo "***************************************"
	echo " No electronic key found               "
	echo " Will generate self signed certificate "
	echo "***************************************"
fi



echo 
echo "Summary :"
echo "**** Account to run the middleware : "
echo "     USER                 = '$XWUSER'"
echo "**** Database configuration : "
echo "     DBVENDOR             = '$DBVENDOR'"
echo "     DBENGINE             = '$DBENGINE'"
echo "     DBHOST               = '$DBHOST'"
echo "     DBNAME               = '$DBNAME'"
echo "     DBADMINLOGIN         = '$DBADMINLOGIN'"
echo "     DBADMINPASSWORD      = '$DBADMINPASSWORD'"
echo "     DBUSERLOGIN          = '$DBUSERLOGIN'"
echo "     DBUSERPASSWORD       = '$DBUSERPASSWORD'"
echo "**** XtremWeb-HEP administrator client configuration : "
echo "     XWADMINLOGIN         = '$XWADMINLOGIN'"
echo "     XWADMINPASSWORD      = '$XWADMINPASSWORD'"
echo "**** XtremWeb-HEP public worker configuration : "
echo "     XWWORKERLOGIN        = '$XWWORKERLOGIN'"
echo "     XWWORKERPASSWORD     = '$XWWORKERPASSWORD'"
echo "**** XtremWeb-HEP public Vworker configuration : "
echo "     XWVWORKERLOGIN       = '$XWVWORKERLOGIN'"
echo "     XWVWORKERPASSWORD    = '$XWVWORKERPASSWORD'"
echo "**** XtremWeb-HEP server configuration : "
echo "     XWSERVER             = '$XWSERVER'"
echo "     XWUPGRADEURL         = '$XWUPGRADEURL'"
echo "**** CA certificates path : "
echo "     X509CERTDIR          = '$X509CERTDIR'"
#echo "     USERCERTDIR          = '$USERCERTDIR'"
echo "**** Certificate configuration : "
echo "     Keys found           = '$XWELECTRONICKEYS'"
echo "     SSLKEYPASSPHRASE     = '$SSLKEYPASSPHRASE'"
echo "     SSLKEYCLIENTPASSWORD = '$SSLKEYCLIENTPASSWORD'"
echo "     SSLKEYSERVERPASSWORD = '$SSLKEYSERVERPASSWORD'"
echo "     SSLKEYWORKERPASSWORD = '$SSLKEYWORKERPASSWORD'"
echo "     Common Name          = '$CERTCN'"
echo "     Organisation Unit    = '$CERTOU'"
echo "     Organization Name    = '$CERTO'"
echo "     Locality Name        = '$CERTL'"
echo "     Country              = '$CERTC'"
if [ "$FORCEYES" = "NO" ] ; then
	echo
	YESNO="N"
	printf "Do you accept it [y/N] ? "
	read YESNO
	
	if [ "$YESNO" != "y" -a "$YESNO" != "Y" ] ; then
		fatal "Cancel by user"
	fi
fi


#
# set the account to run the middleware
#
echo "Setting the account to run the middleware to '$XWUSER'"
IFILE=$BINDIR/xtremwebconf.sh
cat $IFILE | sed "s/^XWUSER=.*/XWUSER=$XWUSER/g" >  $TMPFILE1
mv -f $TMPFILE1 $IFILE

#
# Preparing the server configuration file
#
rm -f $TMPFILE1
rm -f $TMPFILE2
printf "Preparing server configuration file '$XWSERVERCONFFILE'"
SEDVAR=`echo "$DBHOST" | sed -f $SEDCMDS`
grep -E  "^[[:space:]]*DBHOST[[:space:]]*=.*" $XWSERVERCONFFILE > /dev/null 2>&1
if [ $? -eq 0 ] ; then
    cat $XWSERVERCONFFILE | sed  "s/^[[:space:]]*DBHOST[[:space:]]*=.*/DBHOST=$SEDVAR/g" >  $TMPFILE2
else
	grep -E  "^[[:space:]]*#.*DBHOST[[:space:]]*=.*" $XWSERVERCONFFILE > /dev/null 2>&1
	if [ $? -eq 0 ] ; then
    	cat $XWSERVERCONFFILE | sed  "s/^[[:space:]]*#.*DBHOST[[:space:]]*=.*/DBHOST=$SEDVAR/g" >  $TMPFILE2
	else
    	cp -f $XWSERVERCONFFILE $TMPFILE2
    	echo "DBHOST=$SEDVAR" >> $TMPFILE2
	fi
fi
printf "."

SEDVAR=`echo "$XWUPGRADEURL" | sed -f $SEDCMDS`
grep -E "^[[:space:]]*LAUNCHERURL[[:space:]]*=.*" $TMPFILE2 > /dev/null 2>&1
if [ $? -eq 0 ] ; then
    cat $TMPFILE2 | sed "s/^[[:space:]]*LAUNCHERURL[[:space:]]*=.*/LAUNCHERURL=$SEDVAR/g" >  $TMPFILE1
else
    cp -f $TMPFILE2 $TMPFILE1
    echo "LAUNCHERURL=$SEDVAR" >> $TMPFILE1
fi
printf "."


SEDVAR=`echo "$DBVENDOR" | sed -f $SEDCMDS`
grep -E "^[[:space:]]*DBVENDOR[[:space:]]*=.*" $TMPFILE1 > /dev/null 2>&1
if [ $? -eq 0 ] ; then
    cat $TMPFILE1 | sed  "s/^[[:space:]]*DBVENDOR[[:space:]]*=.*/DBVENDOR=$SEDVAR/g" >  $TMPFILE2
else
	grep -E "^[[:space:]]*#.*DBVENDOR[[:space:]]*=.*" $TMPFILE1 > /dev/null 2>&1
	if [ $? -eq 0 ] ; then
	    cat $TMPFILE1 | sed  "s/^[[:space:]]*#.*DBVENDOR[[:space:]]*=.*/DBVENDOR=$SEDVAR/g" >  $TMPFILE2
	else
    	cp -f $TMPFILE1 $TMPFILE2
    	echo "DBVENDOR=$SEDVAR" >> $TMPFILE2
	fi
fi
printf "."
SEDVAR=`echo "$DBENGINE" | sed -f $SEDCMDS`
grep -E "^[[:space:]]*DBENGINE[[:space:]]*=.*" $TMPFILE2 > /dev/null 2>&1
if [ $? -eq 0 ] ; then
    cat $TMPFILE2 | sed  "s/^[[:space:]]*DBENGINE[[:space:]]*=.*/DBENGINE=$SEDVAR/g" >  $TMPFILE1
else
	grep -E "^[[:space:]]*#.*DBENGINE[[:space:]]*=.*" $TMPFILE2 > /dev/null 2>&1
	if [ $? -eq 0 ] ; then
    	cat $TMPFILE2 | sed  "s/^[[:space:]]*#.*DBENGINE[[:space:]]*=.*/DBENGINE=$SEDVAR/g" >  $TMPFILE1
	else
    	cp -f $TMPFILE2 $TMPFILE1
	    echo "DBENGINE=$SEDVAR" >> $TMPFILE1
	fi
fi
printf "."
SEDVAR=`echo "$DBNAME" | sed -f $SEDCMDS`
grep -E "^[[:space:]]*DBNAME[[:space:]]*=.*"  $TMPFILE1 > /dev/null 2>&1
if [ $? -eq 0 ] ; then
    cat $TMPFILE1 | sed "s/^[[:space:]]*DBNAME[[:space:]]*=.*/DBNAME=$SEDVAR/g" >  $TMPFILE2
else
	grep -E "^[[:space:]]*#.*DBNAME[[:space:]]*=.*"  $TMPFILE1 > /dev/null 2>&1
	if [ $? -eq 0 ] ; then
	    cat $TMPFILE1 | sed "s/^[[:space:]]*#.*DBNAME[[:space:]]*=.*/DBNAME=$SEDVAR/g" >  $TMPFILE2
	else
	    cp -f $TMPFILE1 $TMPFILE2
	    echo "DBNAME=$SEDVAR" >> $TMPFILE2
	fi
fi
rm -f $TMPFILE1
printf "."
SEDVAR=`echo "$DBUSERLOGIN" | sed -f $SEDCMDS`
grep -E "^[[:space:]]*DBUSER[[:space:]]*=.*"  $TMPFILE2 > /dev/null 2>&1
if [ $? -eq 0 ] ; then
    cat $TMPFILE2 | sed "s/^[[:space:]]*DBUSER[[:space:]]*=.*/DBUSER=$SEDVAR/g" > $TMPFILE1
else
	grep -E "^^[[:space:]]*#.*DBUSER[[:space:]]*=.*"  $TMPFILE2 > /dev/null 2>&1
	if [ $? -eq 0 ] ; then
	    cat $TMPFILE2 | sed "s/^[[:space:]]*#.*DBUSER[[:space:]]*=.*/DBUSER=$SEDVAR/g" > $TMPFILE1
	else
	    cp -f $TMPFILE2 $TMPFILE1
	    echo "DBUSER=$SEDVAR" >> $TMPFILE1
	fi
fi
rm -f $TMPFILE2
printf "."
SEDVAR=`echo "$DBUSERPASSWORD" | sed -f $SEDCMDS`
grep -E "^[[:space:]]*DBPASS[[:space:]]*=.*"  $TMPFILE1 > /dev/null 2>&1
if [ $? -eq 0 ] ; then
    cat $TMPFILE1 | sed "s/^[[:space:]]*DBPASS[[:space:]]*=.*/DBPASS=$SEDVAR/g" > $TMPFILE2
else
	grep -E "^[[:space:]]*#.*DBPASS[[:space:]]*=.*"  $TMPFILE1 > /dev/null 2>&1
	if [ $? -eq 0 ] ; then
	    cat $TMPFILE1 | sed "s/^[[:space:]]*#.*DBPASS[[:space:]]*=.*/DBPASS=$SEDVAR/g" > $TMPFILE2
	else
	    cp -f $TMPFILE1 $TMPFILE2
	    echo "DBPASS=$SEDVAR" >> $TMPFILE2
	fi
fi
rm -f $TMPFILE1
printf "."
SEDVAR=`echo "$XWADMINLOGIN" | sed -f $SEDCMDS`
grep -E "^[[:space:]]*ADMINLOGIN[[:space:]]*=.*" $TMPFILE2 > /dev/null 2>&1
if [ $? -eq 0 ] ; then
    cat $TMPFILE2 | sed "s/^[[:space:]]*ADMINLOGIN[[:space:]]*=.*/ADMINLOGIN=$SEDVAR/g" > $TMPFILE1
else
	grep -E "^[[:space:]]*#.*ADMINLOGIN[[:space:]]*=.*" $TMPFILE2 > /dev/null 2>&1
	if [ $? -eq 0 ] ; then
	    cat $TMPFILE2 | sed "s/^[[:space:]]*#.*ADMINLOGIN[[:space:]]*=.*/ADMINLOGIN=$SEDVAR/g" > $TMPFILE1
	else
    	cp -f $TMPFILE2 $TMPFILE1
	    echo "ADMINLOGIN=$SEDVAR" >> $TMPFILE1
	fi
fi
rm -f $TMPFILE2
printf "."
SEDVAR=`echo "$XWADMINPASSWORD" | sed -f $SEDCMDS`
grep -e "^[[:space:]]*ADMINPASSWORD[[:space:]]*=.*" $TMPFILE1 > /dev/null 2>&1
if [ $? -eq 0 ] ; then
    cat $TMPFILE1 | sed "s/^[[:space:]]*ADMINPASSWORD[[:space:]]*=.*/ADMINPASSWORD=$SEDVAR/g" > $TMPFILE2
else
	grep -e "^[[:space:]]*#.*ADMINPASSWORD[[:space:]]*=.*" $TMPFILE1 > /dev/null 2>&1
	if [ $? -eq 0 ] ; then
	    cat $TMPFILE1 | sed "s/^[[:space:]]*#.*ADMINPASSWORD[[:space:]]*=.*/ADMINPASSWORD=$SEDVAR/g" > $TMPFILE2
	else
	    cp -f $TMPFILE1 $TMPFILE2
	    echo "ADMINPASSWORD=$SEDVAR" >> $TMPFILE2
	fi
fi
rm -f $TMPFILE1
printf "."
SEDVAR=`echo "$XWWORKERLOGIN" | sed -f $SEDCMDS`
grep -E "^[[:space:]]*WORKERLOGIN[[:space:]]*=.*" $TMPFILE2 > /dev/null 2>&1
if [ $? -eq 0 ] ; then
    cat $TMPFILE2 | sed "s/^[[:space:]]*WORKERLOGIN[[:space:]]*=.*/WORKERLOGIN=$SEDVAR/g" > $TMPFILE1
else
	grep -E "^[[:space:]]*#.*WORKERLOGIN[[:space:]]*=.*" $TMPFILE2 > /dev/null 2>&1
	if [ $? -eq 0 ] ; then
	    cat $TMPFILE2 | sed "s/^[[:space:]]*#.*WORKERLOGIN[[:space:]]*=.*/WORKERLOGIN=$SEDVAR/g" > $TMPFILE1
	else
	    cp -f $TMPFILE2 $TMPFILE1
	    echo "WORKERLOGIN=$SEDVAR" >> $TMPFILE1
	fi
fi
rm -f $TMPFILE2
printf "."
SEDVAR=`echo "$XWWORKERPASSWORD" | sed -f $SEDCMDS`
grep -E "^[[:space:]]*WORKERPASSWORD[[:space:]]*=.*" $TMPFILE1 > /dev/null 2>&1
if [ $? -eq 0 ] ; then
    cat $TMPFILE1 | sed "s/^[[:space:]]*WORKERPASSWORD[[:space:]]*=.*/WORKERPASSWORD=$SEDVAR/g" > $TMPFILE2
else
	grep -E "^[[:space:]]*#.*WORKERPASSWORD[[:space:]]*=.*" $TMPFILE1 > /dev/null 2>&1
	if [ $? -eq 0 ] ; then
	    cat $TMPFILE1 | sed "s/^[[:space:]]*#.*WORKERPASSWORD[[:space:]]*=.*/WORKERPASSWORD=$SEDVAR/g" > $TMPFILE2
	else
	    cp -f $TMPFILE1 $TMPFILE2
    	echo "WORKERPASSWORD=$SEDVAR" >> $TMPFILE2
	fi
fi
rm -f $TMPFILE1
printf "."
if [ "$DBVENDOR" = "mysql" ] ; then
    XWWORKERUID=`mysql $MYSQLOPTS "$DBNAME" -e "select uid from users where login='$XWWORKERLOGIN'" | tail -1`
fi
SEDVAR=`echo "$XWWORKERUID" | sed -f $SEDCMDS`
grep -E "^[[:space:]]*WORKERUID[[:space:]]*=.*" $TMPFILE2 > /dev/null 2>&1
if [ $? -eq 0 ] ; then
    cat $TMPFILE2 | sed "s/^[[:space:]]*WORKERUID[[:space:]]*=.*/WORKERUID=$SEDVAR/g" > $TMPFILE1
else
	grep -E "^[[:space:]]*#.*WORKERUID[[:space:]]*=.*" $TMPFILE2 > /dev/null 2>&1
	if [ $? -eq 0 ] ; then
	    cat $TMPFILE2 | sed "s/^[[:space:]]*#.*WORKERUID[[:space:]]*=.*/WORKERUID=$SEDVAR/g" > $TMPFILE1
	else
	    cp -f $TMPFILE2 $TMPFILE1
	    echo "WORKERUID=$SEDVAR" >> $TMPFILE1
	fi
fi
rm -f $TMPFILE2
printf "."

if [ "$DBVENDOR" = "mysql" ] ; then
    XWADMINUID=`mysql $MYSQLOPTS "$DBNAME" -e "select uid from users where login='$XWADMINLOGIN'" | tail -1`
fi
SEDVAR=`echo "$XWADMINUID" | sed -f $SEDCMDS`
grep -E "^[[:space:]]*ADMINUID[[:space:]]*=.*" $TMPFILE1 > /dev/null 2>&1
if [ $? -eq 0 ] ; then
    cat $TMPFILE1 | sed "s/^[[:space:]]*ADMINUID[[:space:]]*=.*/ADMINUID=$SEDVAR/g" > $TMPFILE2
else
	grep -E "^[[:space:]]*#.*ADMINUID[[:space:]]*=.*" $TMPFILE1 > /dev/null 2>&1
	if [ $? -eq 0 ] ; then
	    cat $TMPFILE1 | sed "s/^[[:space:]]*#.*ADMINUID[[:space:]]*=.*/ADMINUID=$SEDVAR/g" > $TMPFILE2
	else
	    cp -f $TMPFILE1 $TMPFILE2
	    echo "ADMINUID=$SEDVAR" >> $TMPFILE2
	fi
fi
rm -f $TMPFILE1
printf "."
#mv $TMPFILE1 $TMPFILE2
SAFE_SSLKEYPASSPHRASE=`echo "$SSLKEYPASSPHRASE" | sed -f $SEDCMDS`
grep -E "^[[:space:]]*SSLKEYPASSPHRASE[[:space:]]*=.*" $TMPFILE2 > /dev/null 2>&1
if [ $? -eq 0 ] ; then
    cat $TMPFILE2 | sed "s/^[[:space:]]*SSLKEYPASSPHRASE[[:space:]]*=.*/SSLKEYPASSPHRASE=$SAFE_SSLKEYPASSPHRASE/g" > $TMPFILE1
else
	grep -E "^[[:space:]]*#.*SSLKEYPASSPHRASE[[:space:]]*=.*" $TMPFILE2 > /dev/null 2>&1
	if [ $? -eq 0 ] ; then
	    cat $TMPFILE2 | sed "s/^[[:space:]]*#.*SSLKEYPASSPHRASE[[:space:]]*=.*/SSLKEYPASSPHRASE=$SAFE_SSLKEYPASSPHRASE/g" > $TMPFILE1
	else
	    cp -f $TMPFILE2 $TMPFILE1
	    echo "SSLKEYPASSPHRASE=$SAFE_SSLKEYPASSPHRASE" >> $TMPFILE1
	fi
fi
rm -f $TMPFILE2

printf "."
SAFE_X509CERTDIR=`echo "$X509CERTDIR" | sed -f $SEDCMDS`
grep -E "^[[:space:]]*X509CERTDIR[[:space:]]*=.*" $TMPFILE1 > /dev/null 2>&1
if [ $? -eq 0 ] ; then
    cat $TMPFILE1 | sed "s/^[[:space:]]*X509CERTDIR[[:space:]]*=.*/X509CERTDIR=$SAFE_X509CERTDIR/g" > $TMPFILE2
else
	grep -E "^[[:space:]]*#.*X509CERTDIR[[:space:]]*=.*" $TMPFILE1 > /dev/null 2>&1
	if [ $? -eq 0 ] ; then
	    cat $TMPFILE1 | sed "s/^[[:space:]]*#.*X509CERTDIR[[:space:]]*=.*/X509CERTDIR=$SAFE_X509CERTDIR/g" > $TMPFILE2
	else
	    cp -f $TMPFILE1 $TMPFILE2
	    echo "X509CERTDIR=$SAFE_X509CERTDIR" >> $TMPFILE2
	fi
fi
rm -f $TMPFILE1

printf "."
SAFE_USERCERTDIR=`echo "$USERCERTDIR" | sed -f $SEDCMDS`
grep -E "^[[:space:]]*USERCERTDIR[[:space:]]*=.*" $TMPFILE2 > /dev/null 2>&1
if [ $? -eq 0 ] ; then
    cat $TMPFILE2 | sed "s/^[[:space:]]*USERCERTDIR[[:space:]]*=.*/USERCERTDIR=$SAFE_USERCERTDIR/g" > $TMPFILE1
else
	grep -E "^[[:space:]]*#.*USERCERTDIR[[:space:]]*=.*" $TMPFILE2 > /dev/null 2>&1
	if [ $? -eq 0 ] ; then
	    cat $TMPFILE2 | sed "s/^[[:space:]]*#.*USERCERTDIR[[:space:]]*=.*/USERCERTDIR=$SAFE_USERCERTDIR/g" > $TMPFILE1
	else
	    cp -f $TMPFILE2 $TMPFILE1
	    echo "USERCERTDIR=$SAFE_USERCERTDIR" >> $TMPFILE1
	fi
fi
rm -f $TMPFILE2


printf "."
SAFE_SSLKEYPASSWORD=`echo "$SSLKEYSERVERPASSWORD" | sed -f $SEDCMDS`
grep -E "^[[:space:]]*SSLKEYPASSWORD[[:space:]]*=.*" $TMPFILE1 > /dev/null 2>&1
if [ $? -eq 0 ] ; then
    cat $TMPFILE1 | sed "s/^[[:space:]]*SSLKEYPASSWORD[[:space:]]*=.*/SSLKEYPASSWORD=$SAFE_SSLKEYPASSWORD/g" > $XWSERVERCONFFILE
else
	grep -E "^[[:space:]]*#.*SSLKEYPASSWORD[[:space:]]*=.*" $TMPFILE1 > /dev/null 2>&1
	if [ $? -eq 0 ] ; then
	    cat $TMPFILE1 | sed "s/^[[:space:]]*#.*SSLKEYPASSWORD[[:space:]]*=.*/SSLKEYPASSWORD=$SAFE_SSLKEYPASSWORD/g" > $XWSERVERCONFFILE
	else
	    cp -f $TMPFILE1 $XWSERVERCONFFILE
	    echo "SSLKEYPASSPHRASE=$SAFE_SSLKEYPASSWORD" >> $XWSERVERCONFFILE
	fi
fi
rm -f $TMPFILE1
printf "."


echo " Done"

#
# Preparing xw-ganglia
#
printf "Preparing xtremweb.ganglia"
rm -f $TMPFILE1
rm -f $TMPFILE2
SEDVAR=`echo "$DBHOST" | sed -f $SEDCMDS`
cat $XWGMOND | sed  "s/^[[:space:]]*my \$DBHOST[[:space:]]*=.*/my \$DBHOST=\"$SEDVAR\";/g" >  $TMPFILE1
printf "."
SEDVAR=`echo "$DBNAME" | sed -f $SEDCMDS`
cat $TMPFILE1 | sed "s/^[[:space:]]*my \$database[[:space:]]*=.*/my \$database=\"$SEDVAR\";/g" >  $TMPFILE2
rm -f $TMPFILE1
printf "."
SEDVAR=`echo "$DBUSERLOGIN" | sed -f $SEDCMDS`
cat $TMPFILE2 | sed "s/^[[:space:]]*my \$DBUSER[[:space:]]*=.*/my \$DBUSER=\"$SEDVAR\";/g" > $TMPFILE1
rm -f $TMPFILE2
printf "."
SEDVAR=`echo "$DBUSERPASSWORD" | sed -f $SEDCMDS`
cat $TMPFILE1 | sed "s/^[[:space:]]*my \$dbpassword[[:space:]]*=.*/my \$dbpassword=\"$SEDVAR\";/g" > $TMPFILE2
rm -f $TMPFILE1
mv -f $TMPFILE2 $XWGMOND
chmod +x $XWGMOND
echo "Done"

#
# Preparing script to generate keystores
#

CERTNAME="cn=$CERTCN,o=$CERTO,c=$CERTC"
[ "$CERTOU" != "" ] && CERTNAME="$CERTNAME,ou=$CERTOU"
[ "$CERTL" != "" ] && CERTNAME="$CERTNAME,l=$CERTL"


printf "Generating script to manage keystores ($GENKEYS)"
SAFE_SSLKEYSERVERPASSWORD=`echo "$SSLKEYSERVERPASSWORD" | sed -f $SEDCMDS`
SAFE_SSLKEYWORKERPASSWORD=`echo "$SSLKEYWORKERPASSWORD" | sed -f $SEDCMDS`
SAFE_SSLKEYCLIENTPASSWORD=`echo "$SSLKEYCLIENTPASSWORD" | sed -f $SEDCMDS`

cat <<EOF > $GENKEYS
#!/bin/sh
# This is automatically generated by xwconfigure : don't edit
# This aims to generate keystores
#
# Copyrights     : CNRS
# Author         : Oleg Lodygensky
# Acknowledgment : XtremWeb-HEP is based on XtremWeb 1.8.0 by INRIA : http://www.xtremweb.net/
# Web            : http://www.xtremweb-hep.org
# 
#      This file is part of XtremWeb-HEP.
#
#    XtremWeb-HEP is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    XtremWeb-HEP is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with XtremWeb-HEP.  If not, see <http://www.gnu.org/licenses/>.
#
#


##################################################
# fatal()
##################################################
fatal() {
  echo "[\`date\`] \`basename \$0\` - [FATAL] : \$*"
  exit 1
}

##################################################
# error()
##################################################
error() {
  echo "[\`date\`] \`basename \$0\` - [ERROR] : \$*"
}

##################################################
# warn()
##################################################
warn() {
  echo "[\`date\`] \`basename \$0\` - [WARN] : \$*"
}

##################################################
# info()
##################################################
info() {
  echo "[\`date\`] \`basename \$0\` - [INFO] : \$*"
}

##################################################
# main
##################################################

PREFIX=\`dirname \$0\`
BINDIR=\$PREFIX/../bin
LIBDIR=\$PREFIX/../lib
JARFILE=\$LIBDIR/xtremweb.jar
KEYSDIR=\$PREFIX/../keystore
X509CERTDIR=$X509CERTDIR
USERCERTDIR=$USERCERTDIR
JETTY=\$LIBDIR/jetty-server-9.3.8.v20160314.jar
JETTYUTIL=\$LIBDIR/jetty-util-9.3.8.v20160314.jar
JETTYHTTP=\$LIBDIR/jetty-http-9.3.8.v20160314.jar
JETTYIO=\$LIBDIR/jetty-io-9.3.8.v20160314.jar
JETTYSERVLETAPI=$LIBDIR/servlet-api-3.1.jar

OID_CP="\$JARFILE:\$JETTY:\$JETTYUTIL:\$JETTYHTTP:\$JETTYIO:\$JETTYSERVLETAPI:\$LIBDIR/JOpenId-1.08.jar"
OID_MAINCLASS="xtremweb.dispatcher.HTTPOpenIdHandler"

DATE=\`date "+%Y%m%d%H%M%S"\`

SERVERALIAS="${XWSERVER}"
WORKERALIAS="xtremweb-hep.worker.\$DATE"
CLIENTALIAS="xtremweb-hep.client.\$DATE"

SERVERFILE=\${KEYSDIR}/$XWSERVERKEYSTOREFILENAME
CERTFILE=\${KEYSDIR}/$XWCERTFILENAME
WORKERFILE=\${KEYSDIR}/$XWWORKERKEYSTOREFILENAME
CLIENTFILE=\${KEYSDIR}/$XWCLIENTKEYSTOREFILENAME

CERTNAME="$CERTNAME"

OPENSSL=openssl
KEYTOOL=keytool
JARSIGNER=jarsigner
[ "X\${JAVA_HOME}" != "X" ] && KEYTOOL=\${JAVA_HOME}/bin/keytool
[ "X\${JAVA_HOME}" != "X" ] && JARSIGNER=\${JAVA_HOME}/bin/jarsigner

type \${KEYTOOL}   > /dev/null 2>&1 || fatal "can't find \${KEYTOOL}"
type \${JARSIGNER} > /dev/null 2>&1 || fatal "can't find \${JARSIGNER}"
type \${OPENSSL}   > /dev/null 2>&1 || fatal "can't find \${OPENSSL}"

#
# This is the server key passphrase
#
SSLKEYPASSPHRASE=$SAFE_SSLKEYPASSPHRASE
#
# This is the server keystore password
#
SSLKeyServerpassword=$SAFE_SSLKEYSERVERPASSWORD
#
# This is both the worker key passphrase and worker keystore password 
# since worker is distributed on unsecure nodes...
#
SSLKeyWorkerpassword=$SAFE_SSLKEYWORKERPASSWORD
#
# This is both the client key passphrase and client keystore password 
# since client is distributed on unsecure nodes...
#
SSLKeyClientpassword=$SAFE_SSLKEYCLIENTPASSWORD


[ ! -d \${KEYSDIR} ]   && mkdir -p \${KEYSDIR}

#
# private + public server keys (not to be distributed):
#
# a keystore can contain several keys identified by their alias
#
if [ -f  \${SERVERFILE} ] ; then
	info "Updating server keystore file \${SERVERFILE}"
else
	info "Generating server keystore file \${SERVERFILE}"
#	SERVERALIAS="${XWSERVER}.\$DATE"
fi


SERVERCERTNAME=\${SERVERALIAS}.pem
SERVERCERT=\${KEYSDIR}/\${SERVERCERTNAME}
SERVERKEYNAME=\${SERVERALIAS}.key
SERVERKEY=\${KEYSDIR}/\${SERVERKEYNAME}
SERVERP12NAME=\${SERVERALIAS}.p12
SERVERP12=\${KEYSDIR}/\${SERVERP12NAME}

IMPORTKEY=1
[ ! -r \${SERVERCERT} ] && IMPORTKEY=0
[ ! -r \${SERVERKEY}  ] && IMPORTKEY=0

if [ \$IMPORTKEY -eq 1 ] ; then
	info "Certificates found; importing certificates into server keystore"
#	SERVERALIAS="${XWSERVER}"

##	\${KEYTOOL} -exportcert -keystore \${SERVERFILE} -alias \${SERVERALIAS} -file \${CERTFILE}                 -storepass "\${SSLKeyServerpassword}" -rfc
#	\${KEYTOOL} -export -keystore \${SERVERFILE} -alias \${SERVERALIAS} -file \${CERTFILE} -storepass "\${SSLKeyServerpassword}" -rfc
#	[ \$? -ne 0 ] && fatal "\${KEYTOOL} : something is wrong with found certificates"
#	\${OPENSSL} x509 -in \${CERTFILE}  -text -noout
#	[ \$? -ne 0 ] && fatal "\${OPENSSL} : something is wrong with found certificates"

	\${OPENSSL} pkcs12 -export -in \${SERVERCERT} -inkey \${SERVERKEY} -out \${SERVERP12}  -passout pass:\${SSLKeyServerpassword} -name \${SERVERALIAS} 
	[ \$? -ne 0 ] && fatal "\${OPENSSL} : can't translate found certificates to PKCS12"
	\${KEYTOOL} -importkeystore -srckeystore \${SERVERP12} -srcstoretype pkcs12 -destkeystore \${SERVERFILE} -deststoretype jks -srcstorepass \${SSLKeyServerpassword} -deststorepass \${SSLKeyServerpassword}  -destkeypass "\${SSLKEYPASSPHRASE}" -srcalias \${SERVERALIAS} -destalias \${SERVERALIAS} 
	[ \$? -ne 0 ] && fatal "\${KEYTOOL} : can't import keystore from found certificates"
	\${KEYTOOL} -export -keystore \${SERVERFILE} -alias \${SERVERALIAS} -file \${CERTFILE} -storepass "\${SSLKeyServerpassword}" -rfc
	[ \$? -ne 0 ] && fatal "\${KEYTOOL} : can't export public key from found certificates"
else
	info "No certificate found; creating self signed ones"
	\${KEYTOOL} -genkey -dname "\${CERTNAME}" -alias \${SERVERALIAS} -storepass "\${SSLKeyServerpassword}" -keypass "\${SSLKEYPASSPHRASE}" -keystore \${SERVERFILE} -validity 365 -v  -keyalg RSA -keysize 2048
	[ \$? -ne 0 ] && fatal "can't create self signed certificates"
	\${KEYTOOL} -export     -keystore \${SERVERFILE} -alias \${SERVERALIAS} -file \${CERTFILE} -storepass "\${SSLKeyServerpassword}" -v
	[ \$? -ne 0 ] && fatal "can't export self signed public key"
fi

\${KEYTOOL} -list  -keystore \${SERVERFILE} -storepass "\${SSLKeyServerpassword}"
[ \$? -ne 0 ] && fatal "can't list server certificates"

#
# xwcert.keys: server public key (to be disributed)
#
\${KEYTOOL} -printcert -file \${CERTFILE}
[ \$? -ne 0 ] && fatal "can't print server certificates"

#
# Generating worker keystore
#
if [ -f  \${WORKERFILE} ] ; then
  info "Updating worker keystore file \${WORKERFILE}"
else
  info "Generating worker keystore file \${WORKERFILE}"
fi

\${KEYTOOL} -genkey -dname "\${CERTNAME}" -alias \${WORKERALIAS} -storepass "\${SSLKeyWorkerpassword}" -keypass "\${SSLKeyWorkerpassword}" -keystore \${WORKERFILE} -v  -keyalg RSA -keysize 2048
[ $? -ne 0 ] && fatal "can't generate worker keystore"
info "Importing server public key into worker keystore (\${WORKERFILE})"
\${KEYTOOL} -import -alias \${SERVERALIAS} -file \${CERTFILE} -trustcacerts -keystore \${WORKERFILE} -storepass "\${SSLKeyWorkerpassword}" -v -noprompt
[ $? -ne 0 ] && fatal "can't import server public key into worker keystore"
\${KEYTOOL} -list  -keystore \${WORKERFILE} -storepass "\${SSLKeyWorkerpassword}"
[ \$? -ne 0 ] && fatal "can't list certificates from worker keystore"

#
# Generating client keystore
#
if [ -f  \${CLIENTFILE} ] ; then
  info "Updating client keystore file \${CLIENTFILE}"
else
  info "Generating client keystore file \${CLIENTFILE}"
fi

\${KEYTOOL} -genkey -dname "\${CERTNAME}" -alias \${CLIENTALIAS} -storepass "\${SSLKeyClientpassword}" -keypass "\${SSLKeyClientpassword}" -keystore \${CLIENTFILE} -v  -keyalg RSA  -keysize 2048
[ $? -ne 0 ] && fatal "can't generate client keystore"
info "Importing server public key into client keystore (\${WORKERFILE})"
\${KEYTOOL} -import -alias \${SERVERALIAS} -file \${CERTFILE} -trustcacerts -keystore \${CLIENTFILE} -storepass "\${SSLKeyClientpassword}" -v -noprompt
[ $? -ne 0 ] && fatal "can't import server public key into client keystore"
\${KEYTOOL} -list  -keystore \${CLIENTFILE} -storepass "\${SSLKeyClientpassword}"
[ \$? -ne 0 ] && fatal "can't list certificates from client keystore"

#
# Importing CACERTS
# @since 11.5.0
#
info "Importing CACERTS"
\${BINDIR}/import_cacerts_to_keystore.sh \${SERVERFILE} \${SSLKeyServerpassword}
\${BINDIR}/import_cacerts_to_keystore.sh \${WORKERFILE} \${SSLKeyWorkerpassword}
\${BINDIR}/import_cacerts_to_keystore.sh \${CLIENTFILE} \${SSLKeyClientpassword}



#
# Signing jar file
#
info "Signing jar file \${JARFILE}"
\${JARSIGNER} -storepass "\${SSLKeyServerpassword}" -keypass "\${SSLKEYPASSPHRASE}" -keystore \${SERVERFILE} \${JARFILE} \${SERVERALIAS}
[ \$? -ne 0 ] && warn "can't sign jar file"
\${JARSIGNER} -verify -keystore \${WORKERFILE} \${JARFILE}
[ \$? -ne 0 ] && warn "can't verify signed jar file"

info "Done"

EOF

chmod 700 $GENKEYS
echo "  Done"


printf "Generating script to manage OpenId server certificates ($OPENIDSH)"

cat <<EOF > $OPENIDSH
#!/bin/sh
# This is automatically generated by xconfigure : don't edit
# This aims to insert OpenID servers certificate to XWHEP server keystore
#
# Copyrights     : CNRS
# Author         : Oleg Lodygensky
# Acknowledgment : XtremWeb-HEP is based on XtremWeb 1.8.0 by INRIA : http://www.xtremweb.net/
# Web            : http://www.xtremweb-hep.org
# 
#      This file is part of XtremWeb-HEP.
#
#    XtremWeb-HEP is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    XtremWeb-HEP is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with XtremWeb-HEP.  If not, see <http://www.gnu.org/licenses/>.
#
#


DATE=\`date "+%Y%m%d%H%M%S"\`

##################################################
# fatal()
##################################################
fatal() {
  echo "- * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! * -"
  echo "[`date`] `basename \$0` - [fatal] : \$*"
  echo "- * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! * -"
  exit 1
}


##################################################
# main
##################################################

PREFIX=\`dirname \$0\`
BINDIR=\$PREFIX/../bin
KEYSDIR=\$PREFIX/../keystore
LIBDIR=\$PREFIX/../lib
JARFILE=\$LIBDIR/xtremweb.jar

JETTY=\$LIBDIR/jetty-server-9.3.8.v20160314.jar
JETTYUTIL=\$LIBDIR/jetty-util-9.3.8.v20160314.jar
JETTYHTTP=\$LIBDIR/jetty-http-9.3.8.v20160314.jar
JETTYIO=\$LIBDIR/jetty-io-9.3.8.v20160314.jar
JETTYSERVLETAPI=$LIBDIR/servlet-api-3.1.jar


OID_CP="\$JARFILE:\$JETTY:\$JETTYUTIL:\$JETTYHTTP:\$JETTYIO:\$JETTYSERVLETAPI:\$LIBDIR/JOpenId-1.08.jar"
OID_MAINCLASS="xtremweb.dispatcher.HTTPOpenIdHandler"

DATE=\`date "+%Y%m%d%H%M%S"\`

SERVERFILE=\${KEYSDIR}/$XWSERVERKEYSTOREFILENAME

KEYTOOL=keytool
JARSIGNER=jarsigner
[ "X\$JAVA_HOME" != "X" ] && KEYTOOL=\$JAVA_HOME/bin/keytool
[ "X\$JAVA_HOME" != "X" ] && JARSIGNER=\$JAVA_HOME/bin/jarsigner

type \$KEYTOOL > /dev/null 2>&1 || fatal "can't find \$KEYTOOL applications"

[ ! -f \$SERVERFILE ] && fatal "can't find \$SERVERFILE"

#
# This is the server key passphrase
#
SSLKEYPASSPHRASE=$SAFE_SSLKEYPASSPHRASE
#
# This is the server keystore password
#
SSLKeyServerpassword=$SAFE_SSLKEYSERVERPASSWORD

echo "Inserting known OpenId servers certificate paths into server keystore"
echo " - google"
echo " - yahoo"
echo " - facebook"
java -cp \$OID_CP \$OID_MAINCLASS --sav www.google.com www.yahoo.com  www.facebook.com
[ \$? -ne 0 ] &&  warn "can't run java -cp \$OID_CP \$OID_MAINCLASS --sav www.google.com www.yahoo.com www.facebook.com"

# previous command generated
# - www.yahoo.com_0.pem
# - www.yahoo.com_1.pem
# - www.yahoo.com_2.pem
# - www.google.com_0.pem
# - www.google.com_1.pem
# - www.facebook.com_0.pem
# - www.facebook.com_1.pem
#
\${KEYTOOL} -importcert -trustcacerts -noprompt -alias yahoo_\${DATE}_0    -file www.yahoo.com_0.pem    -keystore \${SERVERFILE} -storepass "\${SSLKeyServerpassword}"
\${KEYTOOL} -importcert -trustcacerts -noprompt -alias yahoo_\${DATE}_1    -file www.yahoo.com_1.pem    -keystore \${SERVERFILE} -storepass "\${SSLKeyServerpassword}"
\${KEYTOOL} -importcert -trustcacerts -noprompt -alias yahoo_\${DATE}_2    -file www.yahoo.com_2.pem    -keystore \${SERVERFILE} -storepass "\${SSLKeyServerpassword}"
\${KEYTOOL} -importcert -trustcacerts -noprompt -alias google_\${DATE}_0   -file www.google.com_0.pem   -keystore \${SERVERFILE} -storepass "\${SSLKeyServerpassword}"
\${KEYTOOL} -importcert -trustcacerts -noprompt -alias google_\${DATE}_1   -file www.google.com_1.pem   -keystore \${SERVERFILE} -storepass "\${SSLKeyServerpassword}"
\${KEYTOOL} -importcert -trustcacerts -noprompt -alias facebook_\${DATE}_0 -file www.facebook.com_0.pem -keystore \${SERVERFILE} -storepass "\${SSLKeyServerpassword}"
\${KEYTOOL} -importcert -trustcacerts -noprompt -alias facebook_\${DATE}_1 -file www.facebook.com_1.pem -keystore \${SERVERFILE} -storepass "\${SSLKeyServerpassword}"

EOF

chmod +x $OPENIDSH
echo " Done"


#
# Preparing the worker configuration file
#
rm -f $TMPFILE1
rm -f $TMPFILE2
printf "Preparing worker configuration file '$XWWORKERCONFFILE'"
SEDVAR=`echo "$XWUPGRADEURL" | sed -f $SEDCMDS`
grep -E "^[[:space:]]*LAUNCHERURL[[:space:]]*=.*" $XWWORKERCONFFILE > /dev/null 2>&1
if [ $? -eq 0 ] ; then
    cat $XWWORKERCONFFILE | sed "s/^[[:space:]]*LAUNCHERURL[[:space:]]*=.*/LAUNCHERURL=$SEDVAR/g" >  $TMPFILE1
else
    cp -f $XWWORKERCONFFILE $TMPFILE1
    echo "LAUNCHERURL=$SEDVAR" >> $TMPFILE1
fi
printf "."

#
# The worker has a single pass for both key passphrase and keystore password
#
SAFE_SSLKEYPASSPHRASE=`echo "$SSLKEYWORKERPASSWORD" | sed -f $SEDCMDS`
grep -E "^[[:space:]]*SSLKEYPASSPHRASE[[:space:]]*=.*" $TMPFILE1 > /dev/null 2>&1
if [ $? -eq 0 ] ; then
    cat $TMPFILE1 | sed "s/^[[:space:]]*SSLKEYPASSPHRASE[[:space:]]*=.*/SSLKEYPASSPHRASE=$SAFE_SSLKEYPASSPHRASE/g" > $TMPFILE2
else
	grep -E "^[[:space:]]*#.*SSLKEYPASSPHRASE[[:space:]]*=.*" $TMPFILE1 > /dev/null 2>&1
	if [ $? -eq 0 ] ; then
	    cat $TMPFILE1 | sed "s/^[[:space:]]*#.*SSLKEYPASSPHRASE[[:space:]]*=.*/SSLKEYPASSPHRASE=$SAFE_SSLKEYPASSPHRASE/g" > $TMPFILE2
	else
	    cp -f $TMPFILE1 $TMPFILE2
	    echo "SSLKEYPASSPHRASE=$SAFE_SSLKEYPASSPHRASE" >> $TMPFILE2
	fi
fi
rm -f $TMPFILE1
SAFE_SSLKEYPASSWORD=`echo "$SSLKEYWORKERPASSWORD" | sed -f $SEDCMDS`
grep -E "^[[:space:]]*SSLKEYPASSWORD[[:space:]]*=.*" $TMPFILE2 > /dev/null 2>&1
if [ $? -eq 0 ] ; then
    cat $TMPFILE2 | sed "s/^[[:space:]]*SSLKEYPASSWORD[[:space:]]*=.*/SSLKEYPASSWORD=$SAFE_SSLKEYPASSWORD/g" > $TMPFILE1
else
	grep -E "^[[:space:]]*#.*SSLKEYPASSWORD[[:space:]]*=.*" $TMPFILE2 > /dev/null 2>&1
	if [ $? -eq 0 ] ; then
	    cat $TMPFILE2 | sed "s/^[[:space:]]*#.*SSLKEYPASSWORD[[:space:]]*=.*/SSLKEYPASSWORD=$SAFE_SSLKEYPASSWORD/g" > $TMPFILE1
	else
	    cp -f $TMPFILE2 $TMPFILE1
	    echo "SSLKEYPASSWORD=$SAFE_SSLKEYPASSWORD" >> $TMPFILE1
	fi
fi
rm -f $TMPFILE2

SEDVAR=`echo "$XWSERVER" | sed -f $SEDCMDS`
grep -E "^[[:space:]]*DISPATCHERS[[:space:]]*=.*" $TMPFILE1 > /dev/null 2>&1
if [ $? -eq 0 ] ; then
    cat $TMPFILE1 | sed "s/^[[:space:]]*DISPATCHERS[[:space:]]*=.*/DISPATCHERS=$SEDVAR/g" >  $TMPFILE2
else
    cp -f $TMPFILE1 $TMPFILE2
    echo "DISPATCHERS=$SEDVAR" >> $TMPFILE2
fi
rm -f $TMPFILE1
printf "."
SEDVAR=`echo "$XWWORKERLOGIN" | sed -f $SEDCMDS`
grep -E "^[[:space:]]*LOGIN[[:space:]]*=.*" $TMPFILE2 > /dev/null 2>&1
if [ $? -eq 0 ] ; then
    cat $TMPFILE2 | sed "s/^[[:space:]]*LOGIN[[:space:]]*=.*/LOGIN=$SEDVAR/g" > $TMPFILE1
else
    cp -f $TMPFILE2 $TMPFILE1
    echo "LOGIN=$SEDVAR" >> $TMPFILE1
fi
rm -f $TMPFILE2
printf "."
SEDVAR=`echo "$XWWORKERPASSWORD" | sed -f $SEDCMDS`
grep -E "^[[:space:]]*PASSWORD[[:space:]]*=.*" $TMPFILE1 > /dev/null 2>&1
if [ $? -eq 0 ] ; then
    cat $TMPFILE1 | sed "s/^[[:space:]]*PASSWORD[[:space:]]*=.*/PASSWORD=$SEDVAR/g" > $TMPFILE2
else
    cp -f $TMPFILE1 $TMPFILE2
    echo "PASSWORD=$SEDVAR" >> $TMPFILE2
fi
rm -f $TMPFILE1
printf "."
SEDVAR=`echo "$XWWORKERKEYSTOREFILE" | sed -f $SEDCMDS`
grep -E "^[[:space:]]*SSLKeyStore[[:space:]]*=.*" $TMPFILE2 > /dev/null 2>&1
if [ $? -eq 0 ] ; then
    cat $TMPFILE2 | sed "s/^[[:space:]]*SSLKeyStore[[:space:]]*=.*/SSLKeyStore=$SEDVAR/g" > $XWWORKERCONFFILE
else
    cp -f $TMPFILE2 $XWWORKERCONFFILE
    echo "SSLKeyStore=$SEDVAR" >> $XWWORKERCONFFILE
fi
rm -f $TMPFILE2
echo " Done"

#
# Preparing the vworker configuration file
#
rm -f $TMPFILE1
rm -f $TMPFILE2
printf "Preparing vworker configuration file '$XWVWORKERCONFFILE'"
cp -f $XWWORKERCONFFILE $XWVWORKERCONFFILE
if [ $? -ne 0 ] ; then
	echo "Can't cp -f $XWWORKERCONFFILE $XWVWORKERCONFFILE"
	exit 1
fi
printf "."
SEDVAR=`echo "$XWVWORKERLOGIN" | sed -f $SEDCMDS`
grep -E "^[[:space:]]*LOGIN[[:space:]]*=.*" $XWVWORKERCONFFILE > /dev/null 2>&1
if [ $? -eq 0 ] ; then
    cat $XWVWORKERCONFFILE | sed "s/^[[:space:]]*LOGIN[[:space:]]*=.*/LOGIN=$SEDVAR/g" > $TMPFILE1
else
    cp -f $XWVWORKERCONFFILE $TMPFILE1
    echo "LOGIN=$SEDVAR" >> $TMPFILE1
fi
rm -f $TMPFILE2
printf "."
SEDVAR=`echo "$XWVWORKERPASSWORD" | sed -f $SEDCMDS`
grep -E "^[[:space:]]*PASSWORD[[:space:]]*=.*" $TMPFILE1 > /dev/null 2>&1
if [ $? -eq 0 ] ; then
    cat $TMPFILE1 | sed "s/^[[:space:]]*PASSWORD[[:space:]]*=.*/PASSWORD=$SEDVAR/g" > $XWVWORKERCONFFILE
else
    cp -f $TMPFILE1 $XWVWORKERCONFFILE
    echo "PASSWORD=$SEDVAR" >> $XWVWORKERCONFFILE
fi

echo "Done"



#
# Preparing worker conf file for macosx packages
#
OSXWORKERCONFFILE=$INSTALLERSDIR/macosx/xwhep.worker/installer/PckRoot/private/etc/xwhep.worker/conf/$XWWORKERCONFFILENAME
cp $XWWORKERCONFFILE $OSXWORKERCONFFILE || fatal "Can't cp $XWWORKERCONFFILE $OSXWORKERCONFFILE"
grep -E "^[[:space:]]*SSLKeyStore[[:space:]]*=.*" $OSXWORKERCONFFILE > /dev/null 2>&1
if [ $? -eq 0 ] ; then
    cat $OSXWORKERCONFFILE | sed "s/^[[:space:]]*SSLKeyStore[[:space:]]*=.*/SSLKeyStore=\/private\/etc\/xwhep\.worker\/keystore\/$XWWORKERKEYSTOREFILENAME/g" > $TMPFILE1
else
    cp -f $XWWORKERCONFFILE $TMPFILE1
    echo "SSLKeyStore=/private/etc/xwhep.worker/keystore/$XWWORKERKEYSTOREFILENAME" >> $TMPFILE1
fi
mv -f $TMPFILE1 $OSXWORKERCONFFILE

cptodir="$INSTALLERSDIR/macosx/xwhep.worker/installer/PckRoot/Applications/xwhep.worker/"
cp $ROOTDIR/AUTHORS $cptodir                  > /dev/null 2>&1 || fatal "Can't copy $ROOTDIR/AUTHORS to $cptodir"
cp $ROOTDIR/ChangeLog $cptodir                > /dev/null 2>&1 || fatal "Can't copy $ROOTDIR/ChangeLog to $cptodir"
cp $ROOTDIR/INSTALL $cptodir                  > /dev/null 2>&1 || fatal "Can't copy $ROOTDIR/INSTALL to $cptodir"
cp $ROOTDIR/License $cptodir                  > /dev/null 2>&1 || fatal "Can't copy $ROOTDIR/License to $cptodir"
cp $ROOTDIR/License.bouncycastle $cptodir     > /dev/null 2>&1 || fatal "Can't copy $ROOTDIR/License.bouncycastle to $cptodir"
cp $ROOTDIR/License.smartsockets-1.4 $cptodir > /dev/null 2>&1 || fatal "Can't copy $ROOTDIR/License.smartsockets-1.4 to $cptodir"

SOURCE=$LIBDIR/xtremweb.jar
DEST=$INSTALLERSDIR/macosx/xwhep.worker/installer/PckRoot/private/etc/xwhep.worker/lib/
mkdir -p $INSTALLERSDIR/macosx/xwhep.worker/installer/PckRoot/private/etc/xwhep.worker/lib/
cp $SOURCE $DEST > /dev/null 2>&1 || fatal "Can't copy $SOURCE to $DEST"
SOURCE=$LIBDIR/bcprov-jdk16-140.jar
cp $SOURCE $DEST > /dev/null 2>&1 || fatal "Can't copy $SOURCE to $DEST"
SOURCE=$LIBDIR/ibis-util-2.1.jar
cp $SOURCE $DEST > /dev/null 2>&1 || fatal "Can't copy $SOURCE to $DEST"
SOURCE=$LIBDIR/slf4j-api-1.7.2.jar
cp $SOURCE $DEST > /dev/null 2>&1 || fatal "Can't copy $SOURCE to $DEST"
SOURCE=$LIBDIR/slf4j-log4j12-1.7.2.jar
cp $SOURCE $DEST > /dev/null 2>&1 || fatal "Can't copy $SOURCE to $DEST"
SOURCE=$LIBDIR/smartsockets-1.4.jar
cp $SOURCE $DEST > /dev/null 2>&1 || fatal "Can't copy $SOURCE to $DEST"
SOURCE=$LIBDIR/log4j-1.2-api-2.10.0.jar
cp $SOURCE $DEST > /dev/null 2>&1 || fatal "Can't copy $SOURCE to $DEST"
SOURCE=$JETTY
cp $SOURCE $DEST > /dev/null 2>&1 || fatal "Can't copy $SOURCE to $DEST"
SOURCE=$JETTYUTIL
cp $SOURCE $DEST > /dev/null 2>&1 || fatal "Can't copy $SOURCE to $DEST"
SOURCE=$JETTYHTTP
cp $SOURCE $DEST > /dev/null 2>&1 || fatal "Can't copy $SOURCE to $DEST"
SOURCE=$JETTYIO
cp $SOURCE $DEST > /dev/null 2>&1 || fatal "Can't copy $SOURCE to $DEST"
SOURCE=$JETTYSERVLETAPI
cp $SOURCE $DEST > /dev/null 2>&1 || fatal "Can't copy $SOURCE to $DEST"

#
# Preparing vworker for macosx
#
echo "Preparing vworker for macosx"
cp -rf $INSTALLERSDIR/macosx/xwhep.worker/ $INSTALLERSDIR/macosx/xwhep.vworker/ || fatal "Can't cp -rf $INSTALLERSDIR/macosx/xwhep.worker $INSTALLERSDIR/macosx/xwhep.vworker" 
OSXWORKERCONFFILE=$INSTALLERSDIR/macosx/xwhep.vworker/installer/PckRoot/private/etc/xwhep.worker/conf/$XWWORKERCONFFILENAME
cp $XWVWORKERCONFFILE $OSXWORKERCONFFILE || fatal "Can't cp $XWVWORKERCONFFILE $OSXWORKERCONFFILE"
grep -E "^[[:space:]]*SSLKeyStore[[:space:]]*=.*" $OSXWORKERCONFFILE > /dev/null 2>&1
if [ $? -eq 0 ] ; then
    cat $OSXWORKERCONFFILE | sed "s/^[[:space:]]*SSLKeyStore[[:space:]]*=.*/SSLKeyStore=\/private\/etc\/xwhep\.worker\/keystore\/$XWWORKERKEYSTOREFILENAME/g" > $TMPFILE1
else
    cp -f $XWWORKERCONFFILE $TMPFILE1
    echo "SSLKeyStore=/private/etc/xwhep.worker/keystore/$XWWORKERKEYSTOREFILENAME" >> $TMPFILE1
fi
mv -f $TMPFILE1 $OSXWORKERCONFFILE


#
# Preparing worker for win32 
#
WIN32WORKERCONFFILE=$INSTALLERSDIR/win32/xwhep.worker/innoSetup/worker/conf/$XWWORKERCONFFILENAME
cp $XWWORKERCONFFILE $WIN32WORKERCONFFILE || fatal "Can't cp $XWWORKERCONFFILE $WIN32WORKERCONFFILE"
grep -E "^[[:space:]]*SSLKeyStore[[:space:]]*=.*"  $WIN32WORKERCONFFILE > /dev/null 2>&1
if [ $? -eq 0 ] ; then
    cat $WIN32WORKERCONFFILE | sed "s/^[[:space:]]*SSLKeyStore[[:space:]]*=.*/SSLKeyStore=\.\.\/keystore\/$XWWORKERKEYSTOREFILENAME/g" > $TMPFILE1
else
    cp -f $XWWORKERCONFFILE $TMPFILE1
    echo "SSLKeyStore=../keystore/$XWWORKERKEYSTOREFILENAME" >> $TMPFILE1
fi
mv -f $TMPFILE1 $WIN32WORKERCONFFILE

cptodir="$INSTALLERSDIR/win32/xwhep.worker/innoSetup/worker"
cp $ROOTDIR/AUTHORS $cptodir                  > /dev/null 2>&1 || fatal "Can't copy $ROOTDIR/AUTHORS to $cptodir"
cp $ROOTDIR/ChangeLog $cptodir                > /dev/null 2>&1 || fatal "Can't copy $ROOTDIR/ChangeLog to $cptodir"
cp $ROOTDIR/INSTALL $cptodir                  > /dev/null 2>&1 || fatal "Can't copy $ROOTDIR/INSTALL to $cptodir"
cp $ROOTDIR/License $cptodir                  > /dev/null 2>&1 || fatal "Can't copy $ROOTDIR/License to $cptodir"
cp $ROOTDIR/License.bouncycastle $cptodir     > /dev/null 2>&1 || fatal "Can't copy $ROOTDIR/License.bouncycastle to $cptodir"
cp $ROOTDIR/License.smartsockets-1.4 $cptodir > /dev/null 2>&1 || fatal "Can't copy $ROOTDIR/License.smartsockets-1.4 to $cptodir"

SOURCE=$LIBDIR/xtremweb.jar
DEST="$INSTALLERSDIR/win32/xwhep.worker/innoSetup/worker/lib/"
cp $SOURCE $DEST > /dev/null 2>&1 || fatal "Can't copy $SOURCE to $DEST"
SOURCE=$LIBDIR/bcprov-jdk16-140.jar
cp $SOURCE $DEST > /dev/null 2>&1 || fatal "Can't copy $SOURCE to $DEST"
SOURCE=$LIBDIR/ibis-util-2.1.jar
cp $SOURCE $DEST > /dev/null 2>&1 || fatal "Can't copy $SOURCE to $DEST"
SOURCE=$LIBDIR/slf4j-api-1.7.2.jar
cp $SOURCE $DEST > /dev/null 2>&1 || fatal "Can't copy $SOURCE to $DEST"
SOURCE=$LIBDIR/slf4j-log4j12-1.7.2.jar
cp $SOURCE $DEST > /dev/null 2>&1 || fatal "Can't copy $SOURCE to $DEST"
SOURCE=$LIBDIR/smartsockets-1.4.jar
cp $SOURCE $DEST > /dev/null 2>&1 || fatal "Can't copy $SOURCE to $DEST"
SOURCE=$LIBDIR/log4j-1.2-api-2.10.0.jar
cp $SOURCE $DEST > /dev/null 2>&1 || fatal "Can't copy $SOURCE to $DEST"
SOURCE=$LIBDIR/log4j-api-2.10.0.jar
cp $SOURCE $DEST > /dev/null 2>&1 || fatal "Can't copy $SOURCE to $DEST"
SOURCE=$LIBDIR/log4j-core-2.10.0.jar
cp $SOURCE $DEST > /dev/null 2>&1 || fatal "Can't copy $SOURCE to $DEST"
SOURCE=$JETTY
cp $SOURCE $DEST > /dev/null 2>&1 || fatal "Can't copy $SOURCE to $DEST"
SOURCE=$JETTYUTIL
cp $SOURCE $DEST > /dev/null 2>&1 || fatal "Can't copy $SOURCE to $DEST"
SOURCE=$JETTYHTTP
cp $SOURCE $DEST > /dev/null 2>&1 || fatal "Can't copy $SOURCE to $DEST"
SOURCE=$JETTYIO
cp $SOURCE $DEST > /dev/null 2>&1 || fatal "Can't copy $SOURCE to $DEST"
SOURCE=$JETTYSERVLETAPI
cp $SOURCE $DEST > /dev/null 2>&1 || fatal "Can't copy $SOURCE to $DEST"


echo "Done"



#
# Preparing the client configuration file
#
printf "Preparing client configuration file '$XWCLIENTCONFFILE'"
rm -f $TMPFILE1
rm -f $TMPFILE2
SEDVAR=`echo "$XWUPGRADEURL" | sed -f $SEDCMDS`
grep -E "^[[:space:]]*LAUNCHERURL[[:space:]]*=.*" $XWCLIENTCONFTEMPLATEFILE > /dev/null 2>&1
if [ $? -eq 0 ] ; then
    cat $XWCLIENTCONFTEMPLATEFILE | sed "s/^[[:space:]]*LAUNCHERURL[[:space:]]*=.*/LAUNCHERURL=$SEDVAR/g" >  $TMPFILE1
else
	grep -E "^[[:space:]]*#.*LAUNCHERURL[[:space:]]*=.*" $XWCLIENTCONFTEMPLATEFILE > /dev/null 2>&1
	if [ $? -eq 0 ] ; then
	    cat $XWCLIENTCONFTEMPLATEFILE | sed "s/^[[:space:]]*#.*LAUNCHERURL[[:space:]]*=.*/LAUNCHERURL=$SEDVAR/g" >  $TMPFILE1
	else
	    cp -f $XWCLIENTCONFTEMPLATEFILE $TMPFILE1
	    echo "LAUNCHERURL=$SEDVAR" >> $TMPFILE1
	fi
fi
printf "."
SEDVAR=`echo "$XWSERVER" | sed -f $SEDCMDS`
grep -E "^[[:space:]]*DISPATCHERS[[:space:]]*=.*"  $TMPFILE1 > /dev/null 2>&1
if [ $? -eq 0 ] ; then
    cat $TMPFILE1 | sed "s/^[[:space:]]*DISPATCHERS[[:space:]]*=.*/DISPATCHERS=$SEDVAR/g" >  $TMPFILE2
else
	grep -E "^[[:space:]]*#.*DISPATCHERS[[:space:]]*=.*"  $TMPFILE1 > /dev/null 2>&1
	if [ $? -eq 0 ] ; then
	    cat $TMPFILE1 | sed "s/^[[:space:]]*#.*DISPATCHERS[[:space:]]*=.*/DISPATCHERS=$SEDVAR/g" >  $TMPFILE2
	else
	    cp -f $TMPFILE1 $TMPFILE2
	    echo "DISPATCHERS=$SEDVAR" >> $TMPFILE2
	fi
fi
rm -f $TMPFILE1
printf "."
SEDVAR=`echo "$XWCLIENTKEYSTOREFILE" | sed -f $SEDCMDS`
grep -E "^[[:space:]]*SSLKeyStore[[:space:]]*=.*" $TMPFILE2 > /dev/null 2>&1
if [ $? -eq 0 ] ; then
    cat $TMPFILE2 | sed "s/^[[:space:]]*SSLKeyStore[[:space:]]*=.*/SSLKeyStore=$SEDVAR/g" > $TMPFILE1
else
	grep -E "^[[:space:]]*#.*SSLKeyStore[[:space:]]*=.*" $TMPFILE2 > /dev/null 2>&1
	if [ $? -eq 0 ] ; then
	    cat $TMPFILE2 | sed "s/^[[:space:]]*#.*SSLKeyStore[[:space:]]*=.*/SSLKeyStore=$SEDVAR/g" > $TMPFILE1
	else
	    cp -f $TMPFILE2 $TMPFILE1
	    echo "SSLKeyStore=$SEDVAR" >> $TMPFILE1
	fi
fi
rm -f $TMPFILE2

#
# The client has a single pass for both key passphrase and keystore password
#
SAFE_SSLKEYPASSPHRASE=`echo "$SSLKEYCLIENTPASSWORD" | sed -f $SEDCMDS`
grep -E "^[[:space:]]*SSLKEYPASSPHRASE[[:space:]]*=.*" $TMPFILE1 > /dev/null 2>&1
if [ $? -eq 0 ] ; then
    cat $TMPFILE1 | sed "s/^[[:space:]]*SSLKEYPASSPHRASE[[:space:]]*=.*/SSLKEYPASSPHRASE=$SAFE_SSLKEYPASSPHRASE/g" > $TMPFILE2
else
	grep -E "^[[:space:]]*#.*SSLKEYPASSPHRASE[[:space:]]*=.*" $TMPFILE1 > /dev/null 2>&1
	if [ $? -eq 0 ] ; then
	    cat $TMPFILE1 | sed "s/^[[:space:]]*#.*SSLKEYPASSPHRASE[[:space:]]*=.*/SSLKEYPASSPHRASE=$SAFE_SSLKEYPASSPHRASE/g" > $TMPFILE2
	else
	    cp -f $TMPFILE1 $TMPFILE2
	    echo "SSLKEYPASSPHRASE=$SAFE_SSLKEYPASSPHRASE" >> $TMPFILE2
	fi
fi
rm -f $TMPFILE1
SAFE_SSLKEYPASSWORD=`echo "$SSLKEYCLIENTPASSWORD" | sed -f $SEDCMDS`
grep -E "^[[:space:]]*SSLKEYPASSWORD[[:space:]]*=.*" $TMPFILE2 > /dev/null 2>&1
if [ $? -eq 0 ] ; then
    cat $TMPFILE2 | sed "s/^[[:space:]]*SSLKEYPASSWORD[[:space:]]*=.*/SSLKEYPASSWORD=$SAFE_SSLKEYPASSWORD/g" > $TMPFILE1
else
	grep -E "^[[:space:]]*#.*SSLKEYPASSWORD[[:space:]]*=.*" $TMPFILE2 > /dev/null 2>&1
	if [ $? -eq 0 ] ; then
	    cat $TMPFILE2 | sed "s/^[[:space:]]*#.*SSLKEYPASSWORD[[:space:]]*=.*/SSLKEYPASSWORD=$SAFE_SSLKEYPASSWORD/g" > $TMPFILE1
	else
	    cp -f $TMPFILE2 $TMPFILE1
	    echo "SSLKEYPASSWORD=$SAFE_SSLKEYPASSWORD" >> $TMPFILE1
	fi
fi
rm -f $TMPFILE2

cp $TMPFILE1 $XWCLIENTCONFTEMPLATEFILE


SEDVAR=`echo "$XWADMINLOGIN" | sed -f $SEDCMDS`
grep -E "^[[:space:]]*LOGIN[[:space:]]*=.*" $TMPFILE1 > /dev/null 2>&1
if [ $? -eq 0 ] ; then
    cat $TMPFILE1 | sed "s/^[[:space:]]*LOGIN[[:space:]]*=.*/LOGIN=$SEDVAR/g" > $TMPFILE2
else
	grep -E "^[[:space:]]*#.*LOGIN[[:space:]]*=.*" $TMPFILE1 > /dev/null 2>&1
	if [ $? -eq 0 ] ; then
	    cat $TMPFILE1 | sed "s/^[[:space:]]*#.*LOGIN[[:space:]]*=.*/LOGIN=$SEDVAR/g" > $TMPFILE2
	else
	    cp -f $TMPFILE1 $TMPFILE2
	    echo "LOGIN=$SEDVAR" >> $TMPFILE2
	fi
fi
rm -f $TMPFILE1

printf "."

SEDVAR=`echo "$XWADMINPASSWORD" | sed -f $SEDCMDS`
grep -E "^[[:space:]]*PASSWORD[[:space:]]*=.*" $TMPFILE2 > /dev/null 2>&1
if [ $? -eq 0 ] ; then
    cat $TMPFILE2 | sed "s/^[[:space:]]*PASSWORD[[:space:]]*=.*/PASSWORD=$SEDVAR/g" > $XWCLIENTCONFFILE
else
	grep -E "^[[:space:]]*#.*PASSWORD[[:space:]]*=.*" $TMPFILE2 > /dev/null 2>&1
	if [ $? -eq 0 ] ; then
	    cat $TMPFILE2 | sed "s/^[[:space:]]*#.*PASSWORD[[:space:]]*=.*/PASSWORD=$SEDVAR/g" > $XWCLIENTCONFFILE
	else
	    cp -f $TMPFILE2 $XWCLIENTCONFFILE
	    echo "PASSWORD=$SEDVAR" >> $XWCLIENTCONFFILE
	fi
fi
rm -f $TMPFILE2

echo "Done"

#
# Generating keys
#
if [ -f $XWSERVERKEYSTOREFILE ] ; then

    YESNO="N"

    if [ "$FORCEYES" = "NO" ] ; then

	cat <<EOF

***********************************************************
                        ATTENTION
***********************************************************
  Keystores already exist.
  You can create a new keystore
   - This cancels any existing deployment.
***********************************************************
EOF

	printf "Do you want to create new keystores [y/N] ? "
	read YESNO

	NEWKEYSTORE=0
	if [ "$YESNO" = "y" -o "$YESNO" = "Y" ] ; then
	    NEWKEYSTORE=1
	    NEWALIAS=0
	else

	    cat <<EOF

***********************************************************
                        ATTENTION
***********************************************************
  Keystores already exist.
  You can create a new alias in existing keystores.
   - Inserting a new alias in existing keystores has
     no impact on any eventual existing deployment.
***********************************************************
EOF

	    printf "Do you want to create a new alias in keystores [y/N] ? "
	    read YESNO

	    NEWALIAS=0
	    if [ "$YESNO" = "y" -o "$YESNO" = "Y" ] ; then
		NEWALIAS=1
	    fi

	fi

    fi

else
    NEWKEYSTORE=1
    NEWALIAS=0
fi


if [ $NEWKEYSTORE -eq 1 ] ; then
    if [ -f $XWSERVERKEYSTOREFILE ] ; then
	cat <<EOF

***********************************************************
                        ATTENTION
***********************************************************
  Keystores regeneration forced!!
  You will have to redeploy all clients and workers!!!
***********************************************************
EOF
    fi

    rm -f $KEYSTOREDIR/*.keys $KEYSTOREDIR/*.p12 $XWCERTFILE
fi


if [ $NEWKEYSTORE -eq 1 -o $NEWALIAS -eq 1 ] ; then

    if [ $NEWKEYSTORE -eq 0 ] ; then
	cat <<EOF

***********************************************************
                        ATTENTION
***********************************************************
  Creating a new alias in keystores.
   - Inserting a new alias in existing keystores has
     no impact on any evuentual existing deployment.
***********************************************************
EOF

    fi

    chmod 700 $GENKEYS
    $GENKEYS
    GKRC=$?
    echo GKRC=$GKRC
	echo "*******************"
	if [ $GKRC -eq 0 ] ; then
    	if [ $NEWKEYSTORE -eq 1 ] ; then
			echo "Keystores generated"
	    else
			echo "Keystores updated"
    	fi
    else
		fatal "keystores generation error"
    fi
    echo "*******************"

    . $OPENIDSH
    GKRC=$?
	echo "*******************"
	if [ $GKRC -eq 0 ] ; then
		echo "OpenID server certificates inserted in XWHEP server keystore"
    else
		echo "ERROR : can't insert OpenID server certificates into XWHEP server keystore"
    fi
    echo "*******************"
else
    echo "*******************"
    echo "Keystores unmodified"
    echo "*******************"
fi


cat <<EOF

>>>>>>>>>>>>>>>>>>>>>>>>
! Configuration ready  !
<<<<<<<<<<<<<<<<<<<<<<<<


You must now install the database :
    - xwconfigure-01-db

EOF


##################################################
# EOF
##################################################
