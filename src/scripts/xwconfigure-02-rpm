#!/bin/sh
#=============================================================================
# Copyrights     : CNRS
# Authors        : Oleg Lodygensky, Etienne Urbah
# Acknowledgment : XtremWeb-HEP is based on XtremWeb 1.8.0 by INRIA : http://www.xtremweb.net/
# Web            : http://www.xtremweb-hep.org
# 
#      This file is part of XtremWeb-HEP.
#
#    XtremWeb-HEP is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    XtremWeb-HEP is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with XtremWeb-HEP.  If not, see <http://www.gnu.org/licenses/>.
#=============================================================================

#=============================================================================
#
# File :      xwconfigure-02-rpm
#
# Requirements: xwconfigure-00-conffiles must have been correctly executed
#
# Purpose :   xwconfigure became too complex; it has been split 
#             into several scripts
#             this scripts prepares and possibly build RPM packages
#             
# 2017-12-11  Oleg Lodygensky :
#             -  1st version
#
#=============================================================================


#=============================================================================
# Some variables
#=============================================================================
ROOTDIR=`dirname $0`
echo $ROOTDIR | grep -E "^./.*" > /dev/null  2>&1
[ $? -eq 0 ] && ROOTDIR=`pwd`/$ROOTDIR
currentDir=`pwd`
cd $ROOTDIR/..
ROOTDIR=`pwd`
cd $currentDir

VERSION=%XWVERSION%
INSTALLDIR=%INSTALLDIR%

BINDIR=$ROOTDIR/bin
CONFDIR=$ROOTDIR/conf
DOCDIR=$ROOTDIR/doc
INSTALLERSDIR=$ROOTDIR/installers
KEYSTOREDIR=$ROOTDIR/keystore
LIBDIR=$ROOTDIR/lib
XWCONFVALUES=$CONFDIR/xwconfigure.values
#INITD="/etc/init.d"


GENKEYS=$BINDIR/xwhepgenkeys
OPENIDSH=$BINDIR/xwhepupdateopenidcerts

XWGMOND=$BINDIR/xtremweb.gmond.pl

XWSERVERCONFFILENAME=xtremweb.server.conf
XWCLIENTCONFFILENAME=xtremweb.client.conf
XWBRIDGECONFFILENAME=$XWCLIENTCONFFILENAME
XWCLIENTCONFTEMPLATEFILENAME=xtremweb.client.conf.template
XWWORKERCONFFILENAME=xtremweb.worker.conf
XWVWORKERCONFFILENAME=xtremweb.vworker.conf

XWSERVERCONFFILE=$CONFDIR/$XWSERVERCONFFILENAME
XWCLIENTCONFFILE=$CONFDIR/$XWCLIENTCONFFILENAME
XWBRIDGECONFFILE=$XWCLIENTCONFFILE
XWCLIENTCONFTEMPLATEFILE=$CONFDIR/$XWCLIENTCONFTEMPLATEFILENAME
XWWORKERCONFFILE=$CONFDIR/$XWWORKERCONFFILENAME
XWVWORKERCONFFILE=$CONFDIR/$XWVWORKERCONFFILENAME

SEDCMDS=$BINDIR/xwconfigure.seds

XWELECTRONICKEYS=""
XWSERVERKEYSTOREFILENAME=xwhepserver.keys
XWWORKERKEYSTOREFILENAME=xwhepworker.keys
XWCLIENTKEYSTOREFILENAME=xwhepclient.keys
XWBRIDGEKEYSTOREFILENAME=$XWCLIENTKEYSTOREFILENAME
XWCERTFILENAME=xwhepcert.pem

XWSERVERKEYSTOREFILE=$KEYSTOREDIR/$XWSERVERKEYSTOREFILENAME
XWWORKERKEYSTOREFILE=$KEYSTOREDIR/$XWWORKERKEYSTOREFILENAME
XWCLIENTKEYSTOREFILE=$KEYSTOREDIR/$XWCLIENTKEYSTOREFILENAME
XWBRIDGEKEYSTOREFILE=$XWCLIENTKEYSTOREFILE
XWCERTFILE=$KEYSTOREDIR/$XWCERTFILENAME


JETTY=$LIBDIR/jetty-server-9.3.8.v20160314.jar
JETTYUTIL=$LIBDIR/jetty-util-9.3.8.v20160314.jar
JETTYHTTP=$LIBDIR/jetty-http-9.3.8.v20160314.jar
JETTYIO=$LIBDIR/jetty-io-9.3.8.v20160314.jar
JETTYSERVLETAPI=$LIBDIR/servlet-api-3.1.jar

DEBIANVERSION="/etc/debian_version"
DEBIANOS=0
[ -f $DEBIANVERSION ] && DEBIANOS=1

REDHATVERSION="/etc/redhat-release"
REDHATOS=0
[ -f $REDHATVERSION ] && REDHATOS=1

MACVERSION='uname -s'
MACOS=0
[ "$MACVERSION" = "Darwin" ] && MACOS=1

PKGS="YES"
FORCEYES="NO"
KEEPDB="YES"
NEWKEYSTORE=0
NEWALIAS=0


#=============================================================================
# Function  fatal
#=============================================================================
fatal() {
	cat <<EOF

- * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! * -
[`date`] `basename $0` - FATAL : $*
- * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! * -
EOF
	
	exit 1
}


#=============================================================================
# Function  warning
#=============================================================================
warning() {
	cat <<EOF

- * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! * -
[`date`] `basename $0` - WARN : $*
- * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! * -
EOF
}


#=============================================================================
# Function  info
#=============================================================================
info() {
	cat <<EOF

- * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! * -
[`date`] `basename $0` - INFO : $*
- * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! * -
EOF
}


#=============================================================================
# Function  usage
#=============================================================================
usage() {
	msg=$1
	stopit=0
	
	if [ "$msg" = "STOP" ] ; then
		msg=""
		stopit=1
		help="HELP"
	fi
	if [ "$msg" = "HELP" ] ; then
		msg=""
		help="HELP"
	fi
	
	if [ -n "$msg" ] ; then
		cat <<EOF

- * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! * -
Error : $msg
- * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! * -
EOF
	fi
	
	cat <<EOF

--------------------------------------------------
         XtremWeb-HEP $VERSION 
         XWConfigurator

This script helps to configure an XtremWeb-HEP deployment 
--------------------------------------------------

This script aims to :
 - install a new database: Since 9.1. MySQL (http://www.mysql.com/) only is supported
 - creates electronic keys : 
   * server private key
   * client key store including server public key
   * worker key store including server public key
 - prepare installers
   * Win32 InnoSetup project (http://www.jrsoftware.org/isinfo.php)
   * Mac OS X Package Maker projects (http:/www.apple.com)
   * Linux RPM (http://www.rpm.org)
   * Linux Debian package (http://www.debian.org)

In order to complete configuration, several informations are needed :
 -1- MySQL administrator account (login and password)
     => If you don't know it, please ask your system administrator
 -1.1- Database server, if using MySQL
     => The name or IP address of your MySQL server
 -1.2- Database name
     => If you don't have a valid MySQL administrator account, you won't be able to perform this
     => In such a case, please ask your system administrator to create one new empty database for us
 -1.3- Database user (login and password), if using MySQL
     => This account must have insert/update/delete privileges to the previous database
     => This account will be used by the XW server to access database
     => If you don't have a valid MySQL administrator account, you won't be able to perform this
     => In such a case, please ask your system administrator to create one for you
 -2- Electronic key passphrase
     => This is free and up to you
 -3- Electronic key password for the server
     => This is free and up to you
 -4- Electronic key password for the worker
     => This is free and up to you
 -5- Electronic key password for the client
     => This is free and up to you

All informations are stored in $XWCONFVALUES
So that, you can stop this script when you want, and don't have to re-enter all informations

To reset any variable, edit or erase $XWCONFVALUES

You should be aware that $XWCONFVALUES stores some critical informations!!!

-----------------------------

EOF
	
	if [ -n "$help" ] ; then
		cat <<EOF

Usage : $0 [-h|--help|--h|-?] [-clean] [--yes]
    -h | --help | --h | -? : to get this help
    -clean  : to clean the distribution (remove packages etc.)
    --yes   : to force all answers to "yes" and/or to $XWCONFVALUES values
      Next are only used with "--yes"
EOF
	fi
	
	if [ -n "$msg" ] ; then
		cat <<EOF

- * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! * -
Error : $msg
- * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! * -
EOF
		shift
	fi
	
	[ $stopit -eq 1 ] && exit 1
	[ "$1" = "STOP" ] && exit 1
}


#=============================================================================
# Function  clean
#=============================================================================
clean() {
	printf "Cleaning RPM :"

	# delete */BUILD, */RPMS, */SOURCES, */SPECS, */SRPM"

	rm -Rf $INSTALLERSDIR/linux/rpm/xwhep.client/[BRS]*
	rm -Rf $INSTALLERSDIR/linux/rpm/xwhep.bridgedgsg/[BRS]*
	rm -Rf $INSTALLERSDIR/linux/rpm/xwhep.bridgesgdg/[BRS]*
	rm -Rf $INSTALLERSDIR/linux/rpm/xwhep.server/[BRS]*
	rm -Rf $INSTALLERSDIR/linux/rpm/xwhep.worker/[BRS]*
	rm -Rf $INSTALLERSDIR/linux/rpm/xwhep.vworker/[BRS]*
	
	echo " Done"
	exit 0
}


#=============================================================================
#
# Main
#
#=============================================================================

while [ $# -gt 0 ]; do
	case $1 in
		"-h" | "--help" | "--h" | "-?" )
			usage "STOP"
			;;
		"-clean" )
			clean
			;;
		"--yes" )
			FORCEYES="YES"
			;;
	esac
	shift
done

[ ! -d "$BINDIR" ]        && usage "File not found : $BINDIR ;  please reinstall the package" "STOP"
chmod -R 755 "$BINDIR"
chmod -x "$BINDIR"/*.seds "$BINDIR"/*.bat "$BINDIR"/*.xml
[ ! -d "$CONFDIR" ]       && usage "File not found : $CONFDIR ;  please reinstall the package" "STOP"
[ ! -d "$DOCDIR" ]        && usage "File not found : $DOCDIR ;  please reinstall the package" "STOP"
[ ! -d "$INSTALLERSDIR" ] && usage "File not found : $INSTALLERSDIR ;  please reinstall the package" "STOP"
[ ! -d "$KEYSTOREDIR" ]   && usage "File not found : $KEYSTOREDIR ;  please reinstall the package" "STOP"
[ ! -d "$LIBDIR" ]        && usage "File not found : $LIBDIR ;  please reinstall the package" "STOP"
[ ! -r $XWCONFVALUES]     && usage "File not found : $XWCONFVALUES ;  please reinstall the package" "STOP"

test -w $XWSERVERCONFFILE  || usage "Can't write $XWSERVERCONFFILE" "STOP"
test -w $XWWORKERCONFFILE  || usage "Can't write $XWWORKERCONFFILE" "STOP"
test -w $XWCLIENTCONFFILE  || usage "Can't write $XWCLIENTCONFFILE" "STOP"
test -w $XWBRIDGECONFFILE  || usage "Can't write $XWBRIDGECONFFILE" "STOP"

usage

. $XWCONFVALUES


echo 
echo "Your configuration :"
echo "**** Account to run the middleware : "
echo "     USER                 = '$XWUSER'"
echo "**** Database configuration : "
echo "     DBVENDOR             = '$DBVENDOR'"
echo "     DBENGINE             = '$DBENGINE'"
echo "     DBHOST               = '$DBHOST'"
echo "     DBNAME               = '$DBNAME'"
echo "     DBADMINLOGIN         = '$DBADMINLOGIN'"
echo "     DBADMINPASSWORD      = '$DBADMINPASSWORD'"
echo "     DBUSERLOGIN          = '$DBUSERLOGIN'"
echo "     DBUSERPASSWORD       = '$DBUSERPASSWORD'"
echo "**** XtremWeb-HEP administrator client configuration : "
echo "     XWADMINLOGIN         = '$XWADMINLOGIN'"
echo "     XWADMINPASSWORD      = '$XWADMINPASSWORD'"
echo "**** XtremWeb-HEP public worker configuration : "
echo "     XWWORKERLOGIN        = '$XWWORKERLOGIN'"
echo "     XWWORKERPASSWORD     = '$XWWORKERPASSWORD'"
echo "**** XtremWeb-HEP public Vworker configuration : "
echo "     XWVWORKERLOGIN       = '$XWVWORKERLOGIN'"
echo "     XWVWORKERPASSWORD    = '$XWVWORKERPASSWORD'"
echo "**** XtremWeb-HEP server configuration : "
echo "     XWSERVER             = '$XWSERVER'"
echo "     XWUPGRADEURL         = '$XWUPGRADEURL'"
echo "**** CA certificates path : "
echo "     X509CERTDIR          = '$X509CERTDIR'"
#echo "     USERCERTDIR          = '$USERCERTDIR'"
echo "**** Certificate configuration : "
echo "     Keys found           = '$XWELECTRONICKEYS'"
echo "     SSLKEYPASSPHRASE     = '$SSLKEYPASSPHRASE'"
echo "     SSLKEYCLIENTPASSWORD = '$SSLKEYCLIENTPASSWORD'"
echo "     SSLKEYSERVERPASSWORD = '$SSLKEYSERVERPASSWORD'"
echo "     SSLKEYWORKERPASSWORD = '$SSLKEYWORKERPASSWORD'"
echo "     Common Name          = '$CERTCN'"
echo "     Organisation Unit    = '$CERTOU'"
echo "     Organization Name    = '$CERTO'"
echo "     Locality Name        = '$CERTL'"
echo "     Country              = '$CERTC'"
if [ "$FORCEYES" = "NO" ] ; then
	echo
	YESNO="N"
	printf "Do you accept it [y/N] ? "
	read YESNO
	
	if [ "$YESNO" != "y" -a "$YESNO" != "Y" ] ; then
		fatal "Cancel by user"
	fi
fi


#
# set the account to run the middleware
#
printf "Setting the account to run the middleware to '$XWUSER'"
IFILE=$INSTALLERSDIR/linux/rpm/xwhep.bridgedgsg/xwhep-bridgedgsg.spec
cat $IFILE | sed "s/^%define SYSLOGIN .*/%define SYSLOGIN $XWUSER/g" >  $TMPFILE1
mv -f $TMPFILE1 $IFILE
printf "."
IFILE=$INSTALLERSDIR/linux/rpm/xwhep.server/xwhep-server.spec
cat $IFILE | sed "s/^%define SYSLOGIN.*/%define SYSLOGIN $XWUSER/g" >  $TMPFILE1
mv -f $TMPFILE1 $IFILE
printf "."
IFILE=$INSTALLERSDIR/linux/rpm/xwhep.worker/xwhep-worker.spec
cat $IFILE | sed "s/^%define SYSLOGIN.*/%define SYSLOGIN $XWUSER/g" >  $TMPFILE1
mv -f $TMPFILE1 $IFILE
printf "."
IFILE=$INSTALLERSDIR/linux/rpm/xwhep.vworker/xwhep-worker.spec
cat $IFILE | sed "s/^%define SYSLOGIN.*/%define SYSLOGIN $XWUSER/g" >  $TMPFILE1
mv -f $TMPFILE1 $IFILE
printf "."
echo "Done"



#
# Preparing server RPM package
#
echo
CURRENTWORKINGDIR=$INSTALLERSDIR/linux/rpm/xwhep.server
printf "Preparing server RPM package to '$CURRENTWORKINGDIR'"
mkdir -p $CURRENTWORKINGDIR/RPMS/    > /dev/null 2>&1 || fatal "Can't mkdir -p $CURRENTWORKINGDIR/RPMS/"
mkdir -p $CURRENTWORKINGDIR/SOURCES/ > /dev/null 2>&1 || fatal "Can't mkdir -p $CURRENTWORKINGDIR/SOURCES/"
mkdir -p $CURRENTWORKINGDIR/SPECS/   > /dev/null 2>&1 || fatal "Can't mkdir -p $CURRENTWORKINGDIR/SPECS/"
mkdir -p $CURRENTWORKINGDIR/SRPMS/   > /dev/null 2>&1 || fatal "Can't mkdir -p $CURRENTWORKINGDIR/SRPMS/"

rpmBuildDir="$CURRENTWORKINGDIR/BUILD/"
rpmDir="$rpmBuildDir/xwhep-server-$VERSION"
mkdir -p $rpmDir > /dev/null 2>&1 || fatal "Can't mkdir -p $rpmDir"

printf "."

wkrRpmDir="$rpmDir/$INSTALLDIR/xwhep-server-$VERSION"
mkdir -p $wkrRpmDir/bin      > /dev/null  2>&1 || fatal "Can't mkdir -p $wkrRpmDir/bin"
mkdir -p $wkrRpmDir/doc      > /dev/null  2>&1 || fatal "Can't mkdir -p $wkrRpmDir/doc"
mkdir -p $wkrRpmDir/lib      > /dev/null  2>&1 || fatal "Can't mkdir -p $wkrRpmDir/lib"

printf "."

cp $ROOTDIR/AUTHORS $wkrRpmDir/                  > /dev/null 2>&1 || fatal "Can't copy $ROOTDIR/AUTHORS to $wkrRpmDir/"
cp $ROOTDIR/ChangeLog $wkrRpmDir/                > /dev/null 2>&1 || fatal "Can't copy $ROOTDIR/ChangeLog to $wkrRpmDir/"
cp $ROOTDIR/INSTALL $wkrRpmDir/                  > /dev/null 2>&1 || fatal "Can't copy $ROOTDIR/INSTALL to $wkrRpmDir/"
cp $ROOTDIR/License $wkrRpmDir/                  > /dev/null 2>&1 || fatal "Can't copy $ROOTDIR/License to $wkrRpmDir/"
cp $ROOTDIR/License.bouncycastle $wkrRpmDir/     > /dev/null 2>&1 || fatal "Can't copy $ROOTDIR/License.bouncycastle to $wkrRpmDir/"
cp $ROOTDIR/License.smartsockets-1.4 $wkrRpmDir/ > /dev/null 2>&1 || fatal "Can't copy $ROOTDIR/License.smartsockets-1.4 to $wkrRpmDir/"

mkdir -p $wkrRpmDir/bin/db-maintenance/          > /dev/null 2>&1 || fatal "Can't mkdir -p $wkrRpmDir/bin/db-maintenance/"
cp $BINDIR/db-maintenance/*sql $wkrRpmDir/bin/db-maintenance/   > /dev/null 2>&1 || fatal "Can't copy sql files to $wkrRpmDir/bin/db-maintenance/"

cp $BINDIR/xtremwebconf.sh $wkrRpmDir/bin/       > /dev/null 2>&1 || fatal "Can't copy bin/xtremwebconf.sh to $wkrRpmDir/bin"
cp $BINDIR/xtremweb $wkrRpmDir/bin/              > /dev/null 2>&1 || fatal "Can't copy bin/xtremweb to $wkrRpmDir/bin"
cp $BINDIR/xtremweb.server $wkrRpmDir/bin/       > /dev/null 2>&1 || fatal "Can't copy bin file to $wkrRpmDir/bin"
cp $BINDIR/xtremweb.ganglia $wkrRpmDir/bin/      > /dev/null 2>&1 || fatal "Can't copy bin/xtremweb.ganglia to $wkrRpmDir/bin"
cp $BINDIR/xtremweb.gmond.pl $wkrRpmDir/bin/     > /dev/null 2>&1 || fatal "Can't copy bin/xtremweb.gmond.pl to $wkrRpmDir/bin"
chmod +x $wkrRpmDir/bin/*                        > /dev/null 2>&1 || fatal "Can't chmod +x $wkrRpmDir/bin/*"
chmod -x $wkrRpmDir/bin/*.sql* $wkrRpmDir/bin/*.seds $wkrRpmDir/bin/*.bat $wkrRpmDir/bin/*.xml > /dev/null  2>&1

cp -Rf $DOCDIR/* $wkrRpmDir/doc/ > /dev/null 2>&1 || fatal "Can't copy docs to $wkrRpmDir/doc"


#
#
# 18 sept 2013 : end
#
#

cp $LIBDIR/* $wkrRpmDir/lib/                     > /dev/null 2>&1 || fatal "Can't copy jar files to $wkrRpmDir/lib"

printf "."

rm -f $CURRENTWORKINGDIR/SOURCES/xwhep-server-$VERSION.tar.gz
[ $? -ne 0 ] && fatal "Can't remove tar file"
if [ "$PKGS" = "YES" ] ; then
  (cd $rpmBuildDir && tar cvfz $CURRENTWORKINGDIR/SOURCES/xwhep-server-$VERSION.tar.gz .) > /dev/null  2>&2
  [ $? -ne 0 ] && fatal "Can't create tar file"
fi

printf "."

echo " Done"

if [ $REDHATOS -eq 1 ] ; then
    [ -f $HOME/.rpmmacros ] && cp $HOME/.rpmmacros $HOME/.rpmmacros_sav 

    rm -f $HOME/.rpmmacros 
    cat > $HOME/.rpmmacros  <<EOF
%packager Oleg Lodygensky <oleg.lodygensky@lal.in2p3.fr>
%_topdir $CURRENTWORKINGDIR/
%_tmppath /tmp
EOF

    rpmbuild  --buildroot $CURRENTWORKINGDIR/BUILD/xwhep-server-$VERSION -bb $CURRENTWORKINGDIR/xwhep-server.spec
    if [ $? -ne 0 ] ; then

		cp -f $HOME/.rpmmacros  $CONFDIR/rpmmacros-server

		cat <<EOF > $CURRENTWORKINGDIR/RPMBUILD.txt

***********************************************************
                        ATTENTION
***********************************************************
Can't create server RPM
You may need root privileges to do so...

You need an \$HOME/.rpmmacros file.
This file has been created for you : 
  $CONFDIR/rpmmacros-server

You can invoke rpmbuild :

$> cp -f $CONFDIR/rpmmacros-server \$HOME/.rpmmacros
$> rpmbuild --buildroot $CURRENTWORKINGDIR/BUILD/xwhep-server-$VERSION -bb $CURRENTWORKINGDIR/xwhep-server.spec

The RPM is then ready in :
  $CURRENTWORKINGDIR/RPMS/noarch/

EOF
		cat $CURRENTWORKINGDIR/RPMBUILD.txt

		if [ "$FORCEYES" = "NO"  ] ; then
			printf "(Hit Enter key) "
			read
		fi
    fi

    [ -f $HOME/.rpmmacros_sav ] && mv $HOME/.rpmmacros_sav $HOME/.rpmmacros 
fi




#
# Preparing server configuration RPM package
#
echo
CURRENTWORKINGDIR=$INSTALLERSDIR/linux/rpm/xwhep.server.conf
printf "Preparing server configuration RPM package to '$CURRENTWORKINGDIR'"
mkdir -p $CURRENTWORKINGDIR/RPMS/    > /dev/null 2>&1 || fatal "Can't mkdir -p $CURRENTWORKINGDIR/RPMS/"
mkdir -p $CURRENTWORKINGDIR/SOURCES/ > /dev/null 2>&1 || fatal "Can't mkdir -p $CURRENTWORKINGDIR/SOURCES/"
mkdir -p $CURRENTWORKINGDIR/SPECS/   > /dev/null 2>&1 || fatal "Can't mkdir -p $CURRENTWORKINGDIR/SPECS/"
mkdir -p $CURRENTWORKINGDIR/SRPMS/   > /dev/null 2>&1 || fatal "Can't mkdir -p $CURRENTWORKINGDIR/SRPMS/"

rpmBuildDir="$CURRENTWORKINGDIR/BUILD/"
rpmDir="$rpmBuildDir/xwhep-server-conf-$VERSION"
mkdir -p $rpmDir > /dev/null 2>&1 || fatal "Can't mkdir -p $rpmDir"

printf "."

wkrRpmDir="$rpmDir/$INSTALLDIR/xwhep-server-$VERSION"
mkdir -p $wkrRpmDir/conf     > /dev/null 2>&1 || fatal "Can't mkdir -p $wkrRpmDir/conf"
mkdir -p $wkrRpmDir/keystore > /dev/null 2>&1 || fatal "Can't mkdir -p $wkrRpmDir/keystore"

printf "."


RPMSERVERCONFFILE=$wkrRpmDir/conf/$XWSERVERCONFFILENAME
cp $XWSERVERCONFFILE $RPMSERVERCONFFILE > /dev/null 2>&1 || fatal "Can't copy conf file to $wkrRpmDir/conf/"

cp $XWSERVERCONFFILE $RPMSERVERCONFFILE
SEDVAR=`echo "$INSTALLDIR" | sed -f $SEDCMDS`
grep -E "^[[:space:]]*SSLKeyStore[[:space:]]*=.*/" $RPMSERVERCONFFILE > /dev/null 2>&1
if [ $? -eq 0 ] ; then
    cat $RPMSERVERCONFFILE | sed "s/^[[:space:]]*SSLKeyStore[[:space:]]*=.*/SSLKeyStore=\/$SEDVAR\/xwhep-server-$VERSION\/keystore\/$XWSERVERKEYSTOREFILENAME/g" > $TMPFILE1
else
	grep -E "^[[:space:]]*#.*SSLKeyStore[[:space:]]*=.*/" $RPMSERVERCONFFILE > /dev/null 2>&1
	if [ $? -eq 0 ] ; then
	    cat $RPMSERVERCONFFILE | sed "s/^[[:space:]]*#.*SSLKeyStore[[:space:]]*=.*/SSLKeyStore=\/$SEDVAR\/xwhep-server-$VERSION\/keystore\/$XWSERVERKEYSTOREFILENAME/g" > $TMPFILE1
	else
	    cp -f $RPMSERVERCONFFILE $TMPFILE1
	    echo "SSLKeyStore=/$SEDVAR/xwhep-server-$VERSION/keystore/$XWSERVERKEYSTOREFILENAME" >> $TMPFILE1
	fi
fi
mv -f $TMPFILE1 $RPMSERVERCONFFILE


cp -f $XWSERVERKEYSTOREFILE $wkrRpmDir/keystore/ > /dev/null 2>&1 || fatal "Can't copy $XWSERVERKEYSTOREFILE to $wkrRpmDir/keystore"

printf "."

rm -f $CURRENTWORKINGDIR/SOURCES/xwhep-server-conf-$VERSION.tar.gz
[ $? -ne 0 ] && fatal "Can't remove tar file"
if [ "$PKGS" = "YES" ] ; then
	(cd $rpmBuildDir && tar cvfz $CURRENTWORKINGDIR/SOURCES/xwhep-server-conf-$VERSION.tar.gz .) > /dev/null  2>&2
	[ $? -ne 0 ] && fatal "Can't create tar file"
fi
printf "."

echo " Done"

if [ $REDHATOS -eq 1 ] ; then
    [ -f $HOME/.rpmmacros ] && cp $HOME/.rpmmacros $HOME/.rpmmacros_sav 

    rm -f $HOME/.rpmmacros 
    cat > $HOME/.rpmmacros  <<EOF
%packager Oleg Lodygensky <oleg.lodygensky@lal.in2p3.fr>
%_topdir $CURRENTWORKINGDIR/
%_tmppath /tmp
EOF

    rpmbuild  --buildroot $CURRENTWORKINGDIR/BUILD/xwhep-server-conf-$VERSION -bb $CURRENTWORKINGDIR/xwhep-server-conf.spec
    if [ $? -ne 0 ] ; then

		cp -f $HOME/.rpmmacros  $CONFDIR/rpmmacros-server

		cat <<EOF > $CURRENTWORKINGDIR/RPMBUILD.txt

***********************************************************
                        ATTENTION
***********************************************************
Can't create server RPM
You may need root privileges to do so...

You need an \$HOME/.rpmmacros file.
This file has been created for you : 
  $CONFDIR/rpmmacros-server

You can invoke rpmbuild :

$> cp -f $CONFDIR/rpmmacros-server \$HOME/.rpmmacros
$> rpmbuild --buildroot $CURRENTWORKINGDIR/BUILD/xwhep-server-conf-$VERSION -bb $CURRENTWORKINGDIR/xwhep-server-conf.spec

The RPM is then ready in :
  $CURRENTWORKINGDIR/RPMS/noarch/

EOF
		cat $CURRENTWORKINGDIR/RPMBUILD.txt

		if [ "$FORCEYES" = "NO"  ] ; then
			printf "(Hit Enter key) "
			read
		fi
    fi

    [ -f $HOME/.rpmmacros_sav ] && mv $HOME/.rpmmacros_sav $HOME/.rpmmacros 
fi


#
# Preparing DG to SG bridge RPM package
#

printf "Preparing DG to SG bridge RPM package to '$INSTALLERSDIR/linux/rpm/xwhep.bridgedgsg'"
mkdir -p $INSTALLERSDIR/linux/rpm/xwhep.bridgedgsg/RPMS/    > /dev/null 2>&1 || fatal "Can't mkdir -p $INSTALLERSDIR/linux/rpm/xwhep.bridgedgsg/RPMS/"
mkdir -p $INSTALLERSDIR/linux/rpm/xwhep.bridgedgsg/SOURCES/ > /dev/null 2>&1 || fatal "Can't mkdir -p $INSTALLERSDIR/linux/rpm/xwhep.bridgedgsg/SOURCES/"
mkdir -p $INSTALLERSDIR/linux/rpm/xwhep.bridgedgsg/SPECS/   > /dev/null 2>&1 || fatal "Can't mkdir -p $INSTALLERSDIR/linux/rpm/xwhep.bridgedgsg/SPECS/"
mkdir -p $INSTALLERSDIR/linux/rpm/xwhep.bridgedgsg/SRPMS/   > /dev/null 2>&1 || fatal "Can't mkdir -p $INSTALLERSDIR/linux/rpm/xwhep.bridgedgsg/SRPMS/"

rpmBuildDir="$INSTALLERSDIR/linux/rpm/xwhep.bridgedgsg/BUILD/"
rpmDir="$rpmBuildDir/xwhep-bridgedgsg-$VERSION"
mkdir -p $rpmDir > /dev/null 2>&1 || fatal "Can't mkdir -p $rpmDir"

printf "."

wkrRpmDir="$rpmDir/$INSTALLDIR/xwhep-bridgedgsg-$VERSION"
mkdir -p $wkrRpmDir/bin      > /dev/null 2>&1 || fatal "Can't mkdir -p $wkrRpmDir/bin"
mkdir -p $wkrRpmDir/conf     > /dev/null 2>&1 || fatal "Can't mkdir -p $wkrRpmDir/conf"
mkdir -p $wkrRpmDir/keystore > /dev/null 2>&1 || fatal "Can't mkdir -p $wkrRpmDir/keystore"
mkdir -p $wkrRpmDir/lib      > /dev/null 2>&1 || fatal "Can't mkdir -p $wkrRpmDir/lib"
mkdir -p $wkrRpmDir/doc      > /dev/null 2>&1 || fatal "Can't mkdir -p $wkrRpmDir/doc"

printf "."

cp $ROOTDIR/AUTHORS $wkrRpmDir/                  > /dev/null 2>&1 || fatal "Can't copy $ROOTDIR/AUTHORS to $wkrRpmDir/"
cp $ROOTDIR/ChangeLog $wkrRpmDir/                > /dev/null 2>&1 || fatal "Can't copy $ROOTDIR/ChangeLog to $wkrRpmDir/"
cp $ROOTDIR/INSTALL $wkrRpmDir/                  > /dev/null 2>&1 || fatal "Can't copy $ROOTDIR/INSTALL to $wkrRpmDir/"
cp $ROOTDIR/License $wkrRpmDir/                  > /dev/null 2>&1 || fatal "Can't copy $ROOTDIR/License to $wkrRpmDir/"
cp $ROOTDIR/License.bouncycastle $wkrRpmDir/     > /dev/null 2>&1 || fatal "Can't copy $ROOTDIR/License.bouncycastle to $wkrRpmDir/"
cp $ROOTDIR/License.smartsockets-1.4 $wkrRpmDir/ > /dev/null 2>&1 || fatal "Can't copy $ROOTDIR/License.smartsockets-1.4 to $wkrRpmDir/"

cp $BINDIR/xtremwebconf.sh $wkrRpmDir/bin/ > /dev/null 2>&1 || fatal "Can't copy bin file to $wkrRpmDir/bin"

rm -f $TMPFILE1 $TMPFILE2
SEDVAR=`echo "$DBHOST" | sed -f $SEDCMDS`
grep -E "DBHOST[[:space:]]*=.*" $BINDIR/xwhep.bridgedg2sg.pl > /dev/null 2>&1
if [ $? -eq 0 ] ; then
    cat $BINDIR/xwhep.bridgedg2sg.pl | sed  "s/^[[:space:]]*my \$DBHOST[[:space:]]*=.*/my \$DBHOST=\"$SEDVAR\";/g" >  $TMPFILE1
else
    cp -f $BINDIR/xwhep.bridgedg2sg.pl $TMPFILE1
    echo "my \$DBHOST=\"$SEDVAR\";" >> $TMPFILE1
fi
printf "."
SEDVAR=`echo "$DBNAME" | sed -f $SEDCMDS`
grep -E "DBNAME[[:space:]]*=.*" $TMPFILE1 > /dev/null 2>&1
if [ $? -eq 0 ] ; then
    cat $TMPFILE1 | sed "s/^[[:space:]]*my \$DBNAME[[:space:]]*=.*/my \$DBNAME=\"$SEDVAR\";/g" >  $TMPFILE2
else
    cp -f $TMPFILE1 $TMPFILE2
    echo "my \$DBNAME=\"$SEDVAR\";" >> $TMPFILE2
fi
rm -f $TMPFILE1
printf "."
SEDVAR=`echo "$DBUSERLOGIN" | sed -f $SEDCMDS`
grep -E "DBUSER[[:space:]]*=.*" $TMPFILE2 > /dev/null 2>&1
if [ $? -eq 0 ] ; then
    cat $TMPFILE2 | sed "s/^[[:space:]]*my \$DBUSER[[:space:]]*=.*/my \$DBUSER=\"$SEDVAR\";/g" > $TMPFILE1
else
    cp -f $TMPFILE2 $TMPFILE1
    echo "my \$DBUSER=\"$SEDVAR\";" >> $TMPFILE1
fi
rm -f $TMPFILE2
printf "."
SEDVAR=`echo "$DBUSERPASSWORD" | sed -f $SEDCMDS`
grep -E "dbpassword[[:space:]]*=.*" $TMPFILE1 > /dev/null 2>&1
if [ $? -eq 0 ] ; then
    cat $TMPFILE1 | sed "s/^[[:space:]]*my \$dbpassword[[:space:]]*=.*/my \$dbpassword=\"$SEDVAR\";/g" > $TMPFILE2
else
    cp -f $TMPFILE1 $TMPFILE2
    echo "my \$dbpassword=\"$SEDVAR\";" >> $TMPFILE2
fi
rm -f $TMPFILE1
printf "."
mv $TMPFILE2 $BINDIR/xwhep.bridgedg2sg.pl
chmod +x  $BINDIR/xwhep.bridgedg2sg.pl

cp $BINDIR/* $wkrRpmDir/bin/              > /dev/null  2>&1
rm -f $wkrRpmDir/bin/*sql                 > /dev/null  2>&1
rm -f $wkrRpmDir/bin/context.sh           > /dev/null  2>&1
rm -f $wkrRpmDir/bin/xwhep.bridgesg2dg.pm > /dev/null  2>&1


RPMBRIDGECONFFILE=$wkrRpmDir/conf/$XWBRIDGECONFFILENAME
cp $XWBRIDGECONFFILE $RPMBRIDGECONFFILE > /dev/null 2>&1 || fatal "Can't copy conf file to rpm/conf/"

printf "."

cp $XWBRIDGECONFFILE $RPMBRIDGECONFFILE
SEDVAR=`echo "$INSTALLDIR" | sed -f $SEDCMDS`
grep -E "^[[:space:]]*SSLKeyStore[[:space:]]*=.*" $RPMBRIDGECONFFILE > /dev/null 2>&1
if [ $? -eq 0 ] ; then
    cat $RPMBRIDGECONFFILE | sed "s/^[[:space:]]*SSLKeyStore[[:space:]]*=.*/SSLKeyStore=\/$SEDVAR\/xwhep-bridgedgsg-$VERSION\/keystore\/$XWBRIDGEKEYSTOREFILENAME/g" > $TMPFILE1
else
    cp -f $RPMBRIDGECONFFILE $TMPFILE1
    echo "SSLKeyStore=/$SEDVAR/xwhep-bridgedgsg-$VERSION/keystore/$XWBRIDGEKEYSTOREFILENAME" >> $TMPFILE1
fi

printf "."

grep -E "^[[:space:]]*LOGIN[[:space:]]*=.*" $TMPFILE1 > /dev/null 2>&1
if [ $? -eq 0 ] ; then
    cat $TMPFILE1 | sed "s/^[[:space:]]*LOGIN[[:space:]]*=.*/LOGIN=$XWADMINLOGIN/g" > $TMPFILE2
else
    cp -f $TMPFILE1 $TMPFILE2
    echo "LOGIN=$XWADMINPASSWORD" >> $TMPFILE2
fi

printf "."
grep -E "^[[:space:]]*password[[:space:]]*=.*" $TMPFILE2 > /dev/null 2>&1
if [ $? -eq 0 ] ; then
    cat $TMPFILE2 | sed "s/^[[:space:]]*password[[:space:]]*=.*/password=$XWADMINPASSWORD/g" > $TMPFILE1
else
    cp -f $TMPFILE2 $TMPFILE1
    echo "password=$XWADMINPASSWORD" >> $TMPFILE1
fi

mv -f $TMPFILE1 $RPMBRIDGECONFFILE

printf "."

cp -f $XWBRIDGEKEYSTOREFILE $wkrRpmDir/keystore/ > /dev/null 2>&1 || fatal "Can't copy keystore file to $wkrRpmDir/keystore"
cp $LIBDIR/* $wkrRpmDir/lib/                     > /dev/null 2>&1 || fatal "Can't copy jar file to $wkrRpmDir/lib"
cp -Rf $DOCDIR/* $wkrRpmDir/doc/                 > /dev/null 2>&1 || fatal "Can't copy docs to $wkrRpmDir/bin"

chmod +x $wkrRpmDir/bin/* > /dev/null 2>&1 || fatal "Can't chmod +x"
chmod -x $wkrRpmDir/bin/*.sql* $wkrRpmDir/bin/*.seds $wkrRpmDir/bin/*.bat $wkrRpmDir/bin/*.xml > /dev/null  2>&1

printf "."

rm -f $INSTALLERSDIR/linux/rpm/xwhep.bridgedgsg/SOURCES/xwhep-bridgedgsg-$VERSION.tar.gz
[ $? -ne 0 ] && fatal "Can't remove tar file"
if [ "$PKGS" = "YES" ] ; then
	(cd $rpmBuildDir && tar cvfz $INSTALLERSDIR/linux/rpm/xwhep.bridgedgsg/SOURCES/xwhep-bridgedgsg-$VERSION.tar.gz .) > /dev/null  2>&2
	[ $? -ne 0 ] && fatal "Can't create tar file"
fi
printf "."

echo " Done"

if [ $REDHATOS -eq 1 ] ; then
    [ -f $HOME/.rpmmacros ] && cp $HOME/.rpmmacros $HOME/.rpmmacros_sav 

    rm -f $HOME/.rpmmacros 
    cat > $HOME/.rpmmacros  <<EOF
%packager Oleg Lodygensky <oleg.lodygensky@lal.in2p3.fr>
%_topdir $INSTALLERSDIR/linux/rpm/xwhep.bridgedgsg/
%_tmppath /tmp
EOF

    rpmbuild  --buildroot $INSTALLERSDIR/linux/rpm/xwhep.bridgedgsg/BUILD/xwhep-bridgedgsg-$VERSION -bb $INSTALLERSDIR/linux/rpm/xwhep.bridgedgsg/xwhep-bridgedgsg.spec
    if [ $? -ne 0 ] ; then

		cp -f $HOME/.rpmmacros  $CONFDIR/rpmmacros-bridgedgsg

		cat <<EOF > $INSTALLERSDIR/linux/rpm/xwhep.bridgedgsg/RPMBUILD.txt

***********************************************************
                        ATTENTION
***********************************************************
Can't create bridgedgsg RPM
You may need root privileges to do so...

You will then need an \$HOME/.rpmmacros file.
This file has been created for you here : 
  $CONFDIR/rpmmacros-bridgedgsg

You can invoke rpmbuild :

$> cp -f $CONFDIR/rpmmacros-bridgedgsg \$HOME/.rpmmacros
$> rpmbuild --buildroot $INSTALLERSDIR/linux/rpm/xwhep.bridgedgsg/BUILD/xwhep-bridgedgsg-$VERSION -bb  $INSTALLERSDIR/linux/rpm/xwhep.bridgedgsg/xwhep-bridgedgsg.spec

The RPM is then ready in :
  $INSTALLERSDIR/linux/rpm/xwhep.bridgedgsg/RPMS/noarch/

EOF
		cat $INSTALLERSDIR/linux/rpm/xwhep.bridgedgsg/RPMBUILD.txt
		if [ "$FORCEYES" = "NO"  ] ; then
			printf "(Hit Enter key) "
			read
		fi
    fi

    [ -f $HOME/.rpmmacros_sav ] && mv $HOME/.rpmmacros_sav $HOME/.rpmmacros 
fi



#
# Preparing SG to DG bridge RPM package
#

printf "Preparing SG to DG bridge RPM package to '$INSTALLERSDIR/linux/rpm/xwhep.bridgesgdg'"
mkdir -p $INSTALLERSDIR/linux/rpm/xwhep.bridgesgdg/RPMS/    > /dev/null 2>&1 || fatal "Can't mkdir -p $INSTALLERSDIR/linux/rpm/xwhep.bridgesgdg/RPMS/"
mkdir -p $INSTALLERSDIR/linux/rpm/xwhep.bridgesgdg/SOURCES/ > /dev/null 2>&1 || fatal "Can't mkdir -p $INSTALLERSDIR/linux/rpm/xwhep.bridgesgdg/SOURCES/"
mkdir -p $INSTALLERSDIR/linux/rpm/xwhep.bridgesgdg/SPECS/   > /dev/null 2>&1 || fatal "Can't mkdir -p $INSTALLERSDIR/linux/rpm/xwhep.bridgesgdg/SPECS/"
mkdir -p $INSTALLERSDIR/linux/rpm/xwhep.bridgesgdg/SRPMS/   > /dev/null 2>&1 || fatal "Can't mkdir -p $INSTALLERSDIR/linux/rpm/xwhep.bridgesgdg/SRPMS/"

rpmBuildDir="$INSTALLERSDIR/linux/rpm/xwhep.bridgesgdg/BUILD/"
rpmDir="$rpmBuildDir/xwhep-bridgesgdg-$VERSION"
mkdir -p $rpmDir > /dev/null 2>&1 || fatal "Can't mkdir -p $rpmDir"

printf "."

wkrRpmDir="$rpmDir/$INSTALLDIR/xwhep-bridgesgdg-$VERSION"
mkdir -p $wkrRpmDir/bin      > /dev/null 2>&1 || fatal "Can't mkdir -p $wkrRpmDir/bin"
mkdir -p $wkrRpmDir/conf     > /dev/null 2>&1 || fatal "Can't mkdir -p $wkrRpmDir/conf"
mkdir -p $wkrRpmDir/keystore > /dev/null 2>&1 || fatal "Can't mkdir -p $wkrRpmDir/keystore"
mkdir -p $wkrRpmDir/lib      > /dev/null 2>&1 || fatal "Can't mkdir -p $wkrRpmDir/lib"
mkdir -p $wkrRpmDir/doc      > /dev/null 2>&1 || fatal "Can't mkdir -p $wkrRpmDir/doc"

printf "."

cp $BINDIR/xtremwebconf.sh $wkrRpmDir/bin/ > /dev/null 2>&1 || fatal "Can't copy bin file to $wkrRpmDir/bin"

cp $ROOTDIR/AUTHORS $wkrRpmDir/                  > /dev/null 2>&1 || fatal "Can't copy $ROOTDIR/AUTHORS to $wkrRpmDir/"
cp $ROOTDIR/ChangeLog $wkrRpmDir/                > /dev/null 2>&1 || fatal "Can't copy $ROOTDIR/ChangeLog to $wkrRpmDir/"
cp $ROOTDIR/INSTALL $wkrRpmDir/                  > /dev/null 2>&1 || fatal "Can't copy $ROOTDIR/INSTALL to $wkrRpmDir/"
cp $ROOTDIR/License $wkrRpmDir/                  > /dev/null 2>&1 || fatal "Can't copy $ROOTDIR/License to $wkrRpmDir/"
cp $ROOTDIR/License.bouncycastle $wkrRpmDir/     > /dev/null 2>&1 || fatal "Can't copy $ROOTDIR/License.bouncycastle to $wkrRpmDir/"
cp $ROOTDIR/License.smartsockets-1.4 $wkrRpmDir/ > /dev/null 2>&1 || fatal "Can't copy $ROOTDIR/License.smartsockets-1.4 to $wkrRpmDir/"


cp $BINDIR/* $wkrRpmDir/bin/           > /dev/null  2>&1
rm -f $wkrRpmDir/bin/context.sh        > /dev/null  2>&1
rm -f $wkrRpmDir/bin/*sql              > /dev/null  2>&1
rm -f $wkrRpmDir/bin/xwhep.sgbridge.pm > /dev/null  2>&1


RPMBRIDGECONFFILE=$wkrRpmDir/conf/$XWBRIDGECONFFILENAME
cp $XWBRIDGECONFFILE $RPMBRIDGECONFFILE > /dev/null 2>&1 || fatal "Can't copy conf file to rpm/conf/"

printf "."

cp $XWBRIDGECONFFILE $RPMBRIDGECONFFILE
SEDVAR=`echo "$INSTALLDIR" | sed -f $SEDCMDS`
grep -E "^[[:space:]]*SSLKeyStore[[:space:]]*=.*" $RPMBRIDGECONFFILE > /dev/null 2>&1
if [ $? -eq 0 ] ; then
    cat $RPMBRIDGECONFFILE | sed "s/^[[:space:]]*SSLKeyStore[[:space:]]*=.*/SSLKeyStore=\/$SEDVAR\/xwhep-bridgesgdg-$VERSION\/keystore\/$XWBRIDGEKEYSTOREFILENAME/g" > $TMPFILE1
else
    cp -f $RPMBRIDGECONFFILE $TMPFILE1
    echo "SSLKeyStore=/$SEDVAR/xwhep-bridgesgdg-$VERSION/keystore/$XWBRIDGEKEYSTOREFILENAME" >> $TMPFILE1
fi

printf "."

grep -E "^[[:space:]]*LOGIN[[:space:]]*=.*" $TMPFILE1 > /dev/null 2>&1
if [ $? -eq 0 ] ; then
    cat $TMPFILE1 | sed "s/^[[:space:]]*LOGIN[[:space:]]*=.*/LOGIN=$XWADMINLOGIN/g" > $TMPFILE2
else
    cp -f $TMPFILE1 $TMPFILE2
    echo "LOGIN=$XWADMINPASSWORD" >> $TMPFILE2
fi

printf "."
grep -E "^[[:space:]]*password[[:space:]]*=.*" $TMPFILE2 > /dev/null 2>&1
if [ $? -eq 0 ] ; then
    cat $TMPFILE2 | sed "s/^[[:space:]]*password[[:space:]]*=.*/password=$XWADMINPASSWORD/g" > $TMPFILE1
else
    cp -f $TMPFILE2 $TMPFILE1
    echo "password=$XWADMINPASSWORD" >> $TMPFILE1
fi

rm -f $TMPFILE2
mv -f $TMPFILE1 $RPMBRIDGECONFFILE

printf "."

cp -f $XWBRIDGEKEYSTOREFILE $wkrRpmDir/keystore/ > /dev/null 2>&1 || fatal "Can't copy keystore file to $wkrRpmDir/keystore"
cp $LIBDIR/* $wkrRpmDir/lib/                     > /dev/null 2>&1 || fatal "Can't copy jar file to $wkrRpmDir/lib"
cp -Rf $DOCDIR/* $wkrRpmDir/doc/                 > /dev/null 2>&1 || fatal "Can't copy docs to $wkrRpmDir/bin"

chmod +x $wkrRpmDir/bin/* > /dev/null 2>&1 || fatal "Can't chmod +x"
chmod -x $wkrRpmDir/bin/*.sql* $wkrRpmDir/bin/*.seds $wkrRpmDir/bin/*.bat $wkrRpmDir/bin/*.xml > /dev/null  2>&1

printf "."

rm -f $INSTALLERSDIR/linux/rpm/xwhep.bridgesgdg/SOURCES/xwhep-bridgesgdg-$VERSION.tar.gz
[ $? -ne 0 ] && fatal "Can't remove tar file"
if [ "$PKGS" = "YES" ] ; then
	(cd $rpmBuildDir && tar cvfz $INSTALLERSDIR/linux/rpm/xwhep.bridgesgdg/SOURCES/xwhep-bridgesgdg-$VERSION.tar.gz .) > /dev/null  2>&2
	[ $? -ne 0 ] && fatal "Can't create tar file"
fi
printf "."

echo " Done"

if [ $REDHATOS -eq 1 ] ; then
    [ -f $HOME/.rpmmacros ] && cp $HOME/.rpmmacros $HOME/.rpmmacros_sav 

    rm -f $HOME/.rpmmacros 
    cat > $HOME/.rpmmacros  <<EOF
%packager Oleg Lodygensky <oleg.lodygensky@lal.in2p3.fr>
%_topdir $INSTALLERSDIR/linux/rpm/xwhep.bridgesgdg/
%_tmppath /tmp
EOF

    rpmbuild --buildroot $INSTALLERSDIR/linux/rpm/xwhep.bridgesgdg/BUILD/xwhep-bridgesgdg-$VERSION -bb $INSTALLERSDIR/linux/rpm/xwhep.bridgesgdg/xwhep-bridgesgdg.spec
    if [ $? -ne 0 ] ; then

		cp -f $HOME/.rpmmacros  $CONFDIR/rpmmacros-bridgesgdg

		cat <<EOF > $INSTALLERSDIR/linux/rpm/xwhep.bridgesgdg/RPMBUILD.txt

***********************************************************
                        ATTENTION
***********************************************************
Can't create bridgesgdg RPM
You may need root privileges to do so...

You will then need an \$HOME/.rpmmacros file.
This file has been created for you here : 
  $CONFDIR/rpmmacros-bridgesgdg

You can invoke rpmbuild :

$> cp -f $CONFDIR/rpmmacros-bridgesgdg \$HOME/.rpmmacros
$> rpmbuild --buildroot $INSTALLERSDIR/linux/rpm/xwhep.bridgesgdg/BUILD/xwhep-bridgesgdg-$VERSION -bb  $INSTALLERSDIR/linux/rpm/xwhep.bridgesgdg/xwhep-bridgesgdg.spec

The RPM is then ready in :
  $INSTALLERSDIR/linux/rpm/xwhep.bridgesgdg/RPMS/noarch/

EOF
		cat $INSTALLERSDIR/linux/rpm/xwhep.bridgesgdg/RPMBUILD.txt
		if [ "$FORCEYES" = "NO"  ] ; then
			printf "(Hit Enter key) "
			read
		fi
    fi

    [ -f $HOME/.rpmmacros_sav ] && mv $HOME/.rpmmacros_sav $HOME/.rpmmacros 
fi



#
# Preparing client RPM package
#

printf "Preparing client RPM package to '$INSTALLERSDIR/linux/rpm/xwhep.client'"
mkdir -p $INSTALLERSDIR/linux/rpm/xwhep.client/RPMS/    > /dev/null 2>&1 || fatal "Can't mkdir -p $INSTALLERSDIR/linux/rpm/xwhep.client/RPMS/"
mkdir -p $INSTALLERSDIR/linux/rpm/xwhep.client/SOURCES/ > /dev/null 2>&1 || fatal "Can't mkdir -p $INSTALLERSDIR/linux/rpm/xwhep.client/SOURCES/"
mkdir -p $INSTALLERSDIR/linux/rpm/xwhep.client/SPECS/   > /dev/null 2>&1 || fatal "Can't mkdir -p $INSTALLERSDIR/linux/rpm/xwhep.client/SPECS/"
mkdir -p $INSTALLERSDIR/linux/rpm/xwhep.client/SRPMS/   > /dev/null 2>&1 || fatal "Can't mkdir -p $INSTALLERSDIR/linux/rpm/xwhep.client/SRPMS/"

rpmBuildDir="$INSTALLERSDIR/linux/rpm/xwhep.client/BUILD/"
rpmDir="$rpmBuildDir/xwhep-client-$VERSION"
mkdir -p $rpmDir > /dev/null 2>&1 || fatal "Can't mkdir -p $rpmDir"

printf "."

wkrRpmDir="$rpmDir/$INSTALLDIR/xwhep-client-$VERSION"
mkdir -p $wkrRpmDir/bin      > /dev/null 2>&1 || fatal "Can't mkdir -p $wkrRpmDir/bin"
mkdir -p $wkrRpmDir/conf     > /dev/null 2>&1 || fatal "Can't mkdir -p $wkrRpmDir/conf"
mkdir -p $wkrRpmDir/keystore > /dev/null 2>&1 || fatal "Can't mkdir -p $wkrRpmDir/keystore"
mkdir -p $wkrRpmDir/lib      > /dev/null 2>&1 || fatal "Can't mkdir -p $wkrRpmDir/lib"
mkdir -p $wkrRpmDir/doc      > /dev/null 2>&1 || fatal "Can't mkdir -p $wkrRpmDir/doc"

printf "."

cp $ROOTDIR/AUTHORS $wkrRpmDir/                  > /dev/null 2>&1 || fatal "Can't copy $ROOTDIR/AUTHORS to $wkrRpmDir/"
cp $ROOTDIR/ChangeLog $wkrRpmDir/                > /dev/null 2>&1 || fatal "Can't copy $ROOTDIR/ChangeLog to $wkrRpmDir/"
cp $ROOTDIR/INSTALL $wkrRpmDir/                  > /dev/null 2>&1 || fatal "Can't copy $ROOTDIR/INSTALL to $wkrRpmDir/"
cp $ROOTDIR/License $wkrRpmDir/                  > /dev/null 2>&1 || fatal "Can't copy $ROOTDIR/License to $wkrRpmDir/"
cp $ROOTDIR/License.bouncycastle $wkrRpmDir/     > /dev/null 2>&1 || fatal "Can't copy $ROOTDIR/License.bouncycastle to $wkrRpmDir/"
cp $ROOTDIR/License.smartsockets-1.4 $wkrRpmDir/ > /dev/null 2>&1 || fatal "Can't copy $ROOTDIR/License.smartsockets-1.4 to $wkrRpmDir/"

cp $BINDIR/xtremwebconf.sh $wkrRpmDir/bin/ > /dev/null 2>&1 || fatal "Can't copy bin file to $wkrRpmDir/bin"
cp $BINDIR/* $wkrRpmDir/bin/ > /dev/null  2>&1
rm -f $wkrRpmDir/bin/context.sh > /dev/null  2>&1
rm -f $wkrRpmDir/bin/*sql > /dev/null  2>&1
rm -f $wkrRpmDir/bin/*pl > /dev/null  2>&1
rm -f $wkrRpmDir/bin/*pm > /dev/null  2>&1

RPMCLIENTCONFFILE=$wkrRpmDir/conf/
cp $CONFDIR/$XWCLIENTCONFTEMPLATEFILENAME $RPMCLIENTCONFFILE > /dev/null 2>&1 || fatal "Can't copy client conf template to $RPMCLIENTCONFFILE"

SEDVAR=`echo "$INSTALLDIR" | sed -f $SEDCMDS`
grep -E "^[[:space:]]*SSLKeyStore[[:space:]]*=.*" $CONFDIR/$XWCLIENTCONFTEMPLATEFILENAME > /dev/null 2>&1
if [ $? -eq 0 ] ; then
    cat $CONFDIR/$XWCLIENTCONFTEMPLATEFILENAME | sed "s/^[[:space:]]*SSLKeyStore[[:space:]]*=.*/SSLKeyStore=\/$SEDVAR\/xwhep-client-$VERSION\/keystore\/$XWCLIENTKEYSTOREFILENAME/g" > $TMPFILE1
else
	grep -E "^[[:space:]]*#.*SSLKeyStore[[:space:]]*=.*" $CONFDIR/$XWCLIENTCONFTEMPLATEFILENAME > /dev/null 2>&1
	if [ $? -eq 0 ] ; then
	    cat $CONFDIR/$XWCLIENTCONFTEMPLATEFILENAME | sed "s/^[[:space:]]*#.*SSLKeyStore[[:space:]]*=.*/SSLKeyStore=\/$SEDVAR\/xwhep-client-$VERSION\/keystore\/$XWCLIENTKEYSTOREFILENAME/g" > $TMPFILE1
	else
	    cp -f $CONFDIR/$XWCLIENTCONFTEMPLATEFILENAME $TMPFILE1
	    echo "SSLKeyStore=/$SEDVAR/xwhep-client-$VERSION/keystore/$XWCLIENTKEYSTOREFILENAME" >> $TMPFILE1
	fi
fi
mv -f $TMPFILE1 $CONFDIR/$XWCLIENTCONFTEMPLATEFILENAME


cp -f $XWCLIENTKEYSTOREFILE $wkrRpmDir/keystore/ > /dev/null 2>&1 || fatal "Can't copy keystore file to $wkrRpmDir/keystore"

mkdir -p $INSTALLERSDIR/macosx/xwhep.client/installer/PckRoot/Applications/xwhep.client/keystore/
cp -f $XWCLIENTKEYSTOREFILE $INSTALLERSDIR/macosx/xwhep.client/installer/PckRoot/Applications/xwhep.client/keystore/
[ $? -ne 0 ] && fatal "Can't copy $XWCLIENTKEYSTOREFILE to $INSTALLERSDIR/macosx/xwhep.client/installer/PckRoot/Applications/xwhep.client/keystore/"

SOURCE=$LIBDIR/xtremweb.jar
DEST=$wkrRpmDir/lib/
cp $SOURCE $DEST > /dev/null 2>&1 || fatal "Can't copy $SOURCE to $DEST"
SOURCE=$LIBDIR/bcprov-jdk16-140.jar
cp $SOURCE $DEST > /dev/null 2>&1 || fatal "Can't copy $SOURCE to $DEST"
SOURCE=$LIBDIR/ibis-util-2.1.jar
cp $SOURCE $DEST > /dev/null 2>&1 || fatal "Can't copy $SOURCE to $DEST"
SOURCE=$LIBDIR/slf4j-api-1.7.2.jar
cp $SOURCE $DEST > /dev/null 2>&1 || fatal "Can't copy $SOURCE to $DEST"
SOURCE=$LIBDIR/slf4j-log4j12-1.7.2.jar
cp $SOURCE $DEST > /dev/null 2>&1 || fatal "Can't copy $SOURCE to $DEST"
SOURCE=$LIBDIR/smartsockets-1.4.jar
cp $SOURCE $DEST > /dev/null 2>&1 || fatal "Can't copy $SOURCE to $DEST"
SOURCE=$LIBDIR/log4j-1.2-api-2.10.0.jar
cp $SOURCE $DEST > /dev/null 2>&1 || fatal "Can't copy $SOURCE to $DEST"

cp -Rf $DOCDIR/* $wkrRpmDir/doc/                                                > /dev/null 2>&1 || fatal "Can't copy docs to $wkrRpmDir/bin"
cp $CONFDIR/$XWCLIENTCONFTEMPLATEFILENAME $wkrRpmDir/conf/                      > /dev/null 2>&1 || fatal "Can't copy client conf template to $wkrRpmDir/conf template"
cp $CONFDIR/$XWCLIENTCONFTEMPLATEFILENAME $wkrRpmDir/conf/$XWCLIENTCONFFILENAME > /dev/null 2>&1 || fatal "Can't copy client conf template to $wkrRpmDir/conf"

chmod +x $wkrRpmDir/bin/* > /dev/null 2>&1 || fatal "Can't chmod +x"
chmod -x $wkrRpmDir/bin/*.sql* $wkrRpmDir/bin/*.seds $wkrRpmDir/bin/*.bat $wkrRpmDir/bin/*.xml > /dev/null  2>&1

printf "."

rm -f $INSTALLERSDIR/linux/rpm/xwhep.client/SOURCES/xwhep-client-$VERSION.tar.gz
[ $? -ne 0 ] && fatal "Can't remove tar file"
if [ "$PKGS" = "YES" ] ; then
	(cd $rpmBuildDir && tar cvfz $INSTALLERSDIR/linux/rpm/xwhep.client/SOURCES/xwhep-client-$VERSION.tar.gz .) > /dev/null  2>&2
	[ $? -ne 0 ] && fatal "Can't create tar file"
fi
printf "."

echo " Done"

if [ $REDHATOS -eq 1 ] ; then
    [ -f $HOME/.rpmmacros ] && cp $HOME/.rpmmacros $HOME/.rpmmacros_sav 

    rm -f $HOME/.rpmmacros 
    cat > $HOME/.rpmmacros  <<EOF
%packager Oleg Lodygensky <oleg.lodygensky@lal.in2p3.fr>
%_topdir $INSTALLERSDIR/linux/rpm/xwhep.client/
%_tmppath /tmp
EOF

    rpmbuild --buildroot $INSTALLERSDIR/linux/rpm/xwhep.client/BUILD/xwhep-client-$VERSION -bb $INSTALLERSDIR/linux/rpm/xwhep.client/xwhep-client.spec
    if [ $? -ne 0 ] ; then

		cp -f $HOME/.rpmmacros  $CONFDIR/rpmmacros-client

		cat <<EOF > $INSTALLERSDIR/linux/rpm/xwhep.client/RPMBUILD.txt

***********************************************************
                        ATTENTION
***********************************************************
Can't create client RPM
You may need root privileges to do so...

You will then need an \$HOME/.rpmmacros file.
This file has been created for you here : 
  $CONFDIR/rpmmacros-client

You can invoke rpmbuild :

$> cp -f $CONFDIR/rpmmacros-client \$HOME/.rpmmacros
$> rpmbuild --buildroot $INSTALLERSDIR/linux/rpm/xwhep.client/BUILD/xwhep-client-$VERSION -bb  $INSTALLERSDIR/linux/rpm/xwhep.client/xwhep-client.spec

The RPM is then ready in :
  $INSTALLERSDIR/linux/rpm/xwhep.client/RPMS/noarch/

EOF
		cat $INSTALLERSDIR/linux/rpm/xwhep.client/RPMBUILD.txt
		if [ "$FORCEYES" = "NO"  ] ; then
			printf "(Hit Enter key) "
			read
		fi
    fi

    [ -f $HOME/.rpmmacros_sav ] && mv $HOME/.rpmmacros_sav $HOME/.rpmmacros 
fi

#
# Preparing worker RPM package
#
echo
printf "Preparing worker RPM package to '$INSTALLERSDIR/linux/rpm/xwhep.worker'"
mkdir -p $INSTALLERSDIR/linux/rpm/xwhep.worker/RPMS/    > /dev/null 2>&1 || fatal "Can't mkdir -p $INSTALLERSDIR/linux/rpm/xwhep.worker/RPMS/"
mkdir -p $INSTALLERSDIR/linux/rpm/xwhep.worker/SOURCES/ > /dev/null 2>&1 || fatal "Can't mkdir -p $INSTALLERSDIR/linux/rpm/xwhep.worker/SOURCES/"
mkdir -p $INSTALLERSDIR/linux/rpm/xwhep.worker/SPECS/   > /dev/null 2>&1 || fatal "Can't mkdir -p $INSTALLERSDIR/linux/rpm/xwhep.worker/SPECS/"
mkdir -p $INSTALLERSDIR/linux/rpm/xwhep.worker/SRPMS/   > /dev/null 2>&1 || fatal "Can't mkdir -p $INSTALLERSDIR/linux/rpm/xwhep.worker/SRPMS/"

rpmBuildDir="$INSTALLERSDIR/linux/rpm/xwhep.worker/BUILD/"
rpmDir="$rpmBuildDir/xwhep-worker-$VERSION"
mkdir -p $rpmDir > /dev/null 2>&1 || fatal "Can't mkdir -p $rpmDir"

printf "."

wkrRpmDir="$rpmDir/$INSTALLDIR/xwhep-worker-$VERSION"
mkdir -p $wkrRpmDir/bin      > /dev/null 2>&1 || fatal "Can't mkdir -p $wkrRpmDir/bin"
mkdir -p $wkrRpmDir/conf     > /dev/null 2>&1 || fatal "Can't mkdir -p $wkrRpmDir/conf"
mkdir -p $wkrRpmDir/keystore > /dev/null 2>&1 || fatal "Can't mkdir -p $wkrRpmDir/keystore"
mkdir -p $wkrRpmDir/lib      > /dev/null 2>&1 || fatal "Can't mkdir -p $wkrRpmDir/lib"

printf "."

cp $ROOTDIR/AUTHORS $wkrRpmDir/                  > /dev/null 2>&1 || fatal "Can't copy $ROOTDIR/AUTHORS to $wkrRpmDir/"
cp $ROOTDIR/ChangeLog $wkrRpmDir/                > /dev/null 2>&1 || fatal "Can't copy $ROOTDIR/ChangeLog to $wkrRpmDir/"
cp $ROOTDIR/INSTALL $wkrRpmDir/                  > /dev/null 2>&1 || fatal "Can't copy $ROOTDIR/INSTALL to $wkrRpmDir/"
cp $ROOTDIR/License $wkrRpmDir/                  > /dev/null 2>&1 || fatal "Can't copy $ROOTDIR/License to $wkrRpmDir/"
cp $ROOTDIR/License.bouncycastle $wkrRpmDir/     > /dev/null 2>&1 || fatal "Can't copy $ROOTDIR/License.bouncycastle to $wkrRpmDir/"
cp $ROOTDIR/License.smartsockets-1.4 $wkrRpmDir/ > /dev/null 2>&1 || fatal "Can't copy $ROOTDIR/License.smartsockets-1.4 to $wkrRpmDir/"
cp $BINDIR/xtremwebconf.sh $wkrRpmDir/bin/       > /dev/null 2>&1 || fatal "Can't copy xtremwebconf.sh     to $wkrRpmDir/bin"
cp $BINDIR/xtremweb $wkrRpmDir/bin/              > /dev/null 2>&1 || fatal "Can't copy xtremweb            to $wkrRpmDir/bin"
cp $BINDIR/xtremweb.monitor $wkrRpmDir/bin/      > /dev/null 2>&1 || fatal "Can't copy xtremweb.monitor    to $wkrRpmDir/bin"
cp $BINDIR/xtremweb.monitor.pl $wkrRpmDir/bin/   > /dev/null 2>&1 || fatal "Can't copy xtremweb.monitor.pl to $wkrRpmDir/bin"
cp $BINDIR/xtremweb.worker $wkrRpmDir/bin/       > /dev/null 2>&1 || fatal "Can't copy xtremweb.worker     to $wkrRpmDir/bin"
cp $BINDIR/createvdi $wkrRpmDir/bin/             > /dev/null 2>&1 || fatal "Can't copy createvdi           to $wkrRpmDir/bin"
cp $BINDIR/createiso $wkrRpmDir/bin/             > /dev/null 2>&1 || fatal "Can't copy createiso           to $wkrRpmDir/bin"


RPMWORKERCONFFILE=$wkrRpmDir/conf/$XWWORKERCONFFILENAME
cp $XWWORKERCONFFILE $RPMWORKERCONFFILE > /dev/null 2>&1 || fatal "Can't copy conf file to $wkrRpmDir/conf/"

SEDVAR=`echo "$INSTALLDIR" | sed -f $SEDCMDS`
grep -E "^[[:space:]]*SSLKeyStore[[:space:]]*=.*" $RPMWORKERCONFFILE > /dev/null 2>&1
if [ $? -eq 0 ] ; then
    cat $RPMWORKERCONFFILE | sed "s/^[[:space:]]*SSLKeyStore[[:space:]]*=.*/SSLKeyStore=\/$SEDVAR\/xwhep-worker-$VERSION\/keystore\/$XWWORKERKEYSTOREFILENAME/g" > $TMPFILE1
else
    cp -f $RPMWORKERCONFFILE $TMPFILE1
    echo "SSLKeyStore=/$SEDVAR/xwhep-worker-$VERSION/keystore/$XWWORKERKEYSTOREFILENAME" >> $TMPFILE1
fi
mv -f $TMPFILE1 $RPMWORKERCONFFILE


cp -f $XWWORKERKEYSTOREFILE $wkrRpmDir/keystore/ > /dev/null 2>&1 || fatal "Can't copy keystore file to $wkrRpmDir/keystore"
SOURCE=$LIBDIR/xtremweb.jar
DEST=$wkrRpmDir/lib/
cp $SOURCE $DEST > /dev/null 2>&1 || fatal "Can't copy $SOURCE to $DEST"
SOURCE=$LIBDIR/bcprov-jdk16-140.jar
cp $SOURCE $DEST > /dev/null 2>&1 || fatal "Can't copy $SOURCE to $DEST"
SOURCE=$LIBDIR/ibis-util-2.1.jar
cp $SOURCE $DEST > /dev/null 2>&1 || fatal "Can't copy $SOURCE to $DEST"
SOURCE=$LIBDIR/slf4j-api-1.7.2.jar
cp $SOURCE $DEST > /dev/null 2>&1 || fatal "Can't copy $SOURCE to $DEST"
SOURCE=$LIBDIR/slf4j-log4j12-1.7.2.jar
cp $SOURCE $DEST > /dev/null 2>&1 || fatal "Can't copy $SOURCE to $DEST"
SOURCE=$LIBDIR/smartsockets-1.4.jar
cp $SOURCE $DEST > /dev/null 2>&1 || fatal "Can't copy $SOURCE to $DEST"
SOURCE=$LIBDIR/log4j-1.2-api-2.10.0.jar
cp $SOURCE $DEST > /dev/null 2>&1 || fatal "Can't copy $SOURCE to $DEST"
SOURCE=$JETTY
cp $SOURCE $DEST > /dev/null 2>&1 || fatal "Can't copy $SOURCE to $DEST"
SOURCE=$JETTYUTIL
cp $SOURCE $DEST > /dev/null 2>&1 || fatal "Can't copy $SOURCE to $DEST"
SOURCE=$JETTYHTTP
cp $SOURCE $DEST > /dev/null 2>&1 || fatal "Can't copy $SOURCE to $DEST"
SOURCE=$JETTYIO
cp $SOURCE $DEST > /dev/null 2>&1 || fatal "Can't copy $SOURCE to $DEST"
SOURCE=$JETTYSERVLETAPI
cp $SOURCE $DEST > /dev/null 2>&1 || fatal "Can't copy $SOURCE to $DEST"

chmod +x $wkrRpmDir/bin/* > /dev/null 2>&1 || fatal "Can't chmod +x"
chmod -x $wkrRpmDir/bin/*.sql* $wkrRpmDir/bin/*.seds $wkrRpmDir/bin/*.bat $wkrRpmDir/bin/*.xml > /dev/null  2>&1

printf "."

rm -f $INSTALLERSDIR/linux/rpm/xwhep.worker/SOURCES/xwhep-worker-$VERSION.tar.gz
[ $? -ne 0 ] && fatal "Can't remove tar file"
if [ "$PKGS" = "YES" ] ; then
	(cd $rpmBuildDir && tar cvfz $INSTALLERSDIR/linux/rpm/xwhep.worker/SOURCES/xwhep-worker-$VERSION.tar.gz .) > /dev/null  2>&2
	[ $? -ne 0 ] && fatal "Can't create tar file"
fi

echo " Done"

if [ $REDHATOS -eq 1 ] ; then
    [ -f $HOME/.rpmmacros ] && cp $HOME/.rpmmacros $HOME/.rpmmacros_sav 

    rm -f $HOME/.rpmmacros 
    cat > $HOME/.rpmmacros  <<EOF
%packager Oleg Lodygensky <oleg.lodygensky@lal.in2p3.fr>
%_topdir $INSTALLERSDIR/linux/rpm/xwhep.worker/
%_tmppath /tmp
EOF

    rpmbuild -bb $INSTALLERSDIR/linux/rpm/xwhep.worker/xwhep-worker.spec
    if [ $? -ne 0 ] ; then

		cp -f $HOME/.rpmmacros $CONFDIR/rpmmacros-worker

		cat <<EOF > $INSTALLERSDIR/linux/rpm/xwhep.worker/RPMBUILD.txt

***********************************************************
                        ATTENTION
***********************************************************
Can't create worker RPM
You may need root privileges to do so...

You will then need an \$HOME/.rpmmacros file.
This file has been created for you here : 
  $CONFDIR/rpmmacros-worker

You can invoke rpmbuild :

$> cp -f $CONFDIR/rpmmacros-worker \$HOME/.rpmmacros
$> rpmbuild --buildroot $INSTALLERSDIR/linux/rpm/xwhep.worker/BUILD/xwhep-worker-$VERSION -bb $INSTALLERSDIR/linux/rpm/xwhep.worker/xwhep-worker.spec

The RPM is then ready in :
  $INSTALLERSDIR/linux/rpm/xwhep.worker/RPMS/noarch/

EOF
		cat $INSTALLERSDIR/linux/rpm/xwhep.worker/RPMBUILD.txt
		if [ "$FORCEYES" = "NO"  ] ; then
			printf "(Hit Enter key) "
			read
		fi
    fi

    [ -f $HOME/.rpmmacros_sav ] && mv $HOME/.rpmmacros_sav $HOME/.rpmmacros 
fi






#
# Preparing vworker RPM package
#
printf "Preparing vworker RPM package to '$INSTALLERSDIR/linux/rpm/xwhep.vworker'"
rpmBuildDir="$INSTALLERSDIR/linux/rpm/xwhep.vworker/BUILD/"
cp -rf $INSTALLERSDIR/linux/rpm/xwhep.worker/ $INSTALLERSDIR/linux/rpm/xwhep.vworker/   > /dev/null 2>&1 || fatal "Can't cp -rf $INSTALLERSDIR/linux/rpm/xwhep.worker/ $INSTALLERSDIR/linux/rpm/xwhep.vworker/"
rm -f  $INSTALLERSDIR/linux/rpm/xwhep.vworker/SOURCES/xwhep-worker-$VERSION.tar.gz

rpmDir="$rpmBuildDir/xwhep-worker-$VERSION"
wkrRpmDir="$rpmDir/$INSTALLDIR/xwhep-worker-$VERSION"
mkdir -p $wkrRpmDir/conf/
RPMWORKERCONFFILE=$wkrRpmDir/conf/$XWWORKERCONFFILENAME
cp $XWVWORKERCONFFILE $RPMWORKERCONFFILE > /dev/null 2>&1 || fatal "Can't cp $XWVWORKERCONFFILE $RPMWORKERCONFFILE"

SEDVAR=`echo "$INSTALLDIR" | sed -f $SEDCMDS`
grep -E "^[[:space:]]*SSLKeyStore[[:space:]]*=.*" $RPMWORKERCONFFILE > /dev/null 2>&1
if [ $? -eq 0 ] ; then
    cat $RPMWORKERCONFFILE | sed "s/^[[:space:]]*SSLKeyStore[[:space:]]*=.*/SSLKeyStore=\/$SEDVAR\/xwhep-worker-$VERSION\/keystore\/$XWWORKERKEYSTOREFILENAME/g" > $TMPFILE1
else
    cp -f $RPMWORKERCONFFILE $TMPFILE1
    echo "SSLKeyStore=/$SEDVAR/xwhep-worker-$VERSION/keystore/$XWWORKERKEYSTOREFILENAME" >> $TMPFILE1
fi
mv -f $TMPFILE1 $RPMWORKERCONFFILE



rm -f $INSTALLERSDIR/linux/rpm/xwhep.vworker/SOURCES/xwhep-worker-$VERSION.tar.gz
[ $? -ne 0 ] && fatal "Can't remove tar file"
mkdir -p $INSTALLERSDIR/linux/rpm/xwhep.vworker/SOURCES/
if [ "$PKGS" = "YES" ] ; then
	(cd $rpmBuildDir && tar cvfz $INSTALLERSDIR/linux/rpm/xwhep.vworker/SOURCES/xwhep-worker-$VERSION.tar.gz .) > /dev/null  2>&2
	[ $? -ne 0 ] && fatal "Can't create tar file"
fi

echo " Done"

if [ $REDHATOS -eq 1 ] ; then
    [ -f $HOME/.rpmmacros ] && cp $HOME/.rpmmacros $HOME/.rpmmacros_sav 

    rm -f $HOME/.rpmmacros 
    cat > $HOME/.rpmmacros  <<EOF
%packager Oleg Lodygensky <oleg.lodygensky@lal.in2p3.fr>
%_topdir $INSTALLERSDIR/linux/rpm/xwhep.vworker/
%_tmppath /tmp
EOF

    rpmbuild -bb $INSTALLERSDIR/linux/rpm/xwhep.vworker/xwhep-worker.spec
    if [ $? -ne 0 ] ; then

		cp -f $HOME/.rpmmacros $CONFDIR/rpmmacros-worker

		cat <<EOF > $INSTALLERSDIR/linux/rpm/xwhep.vworker/RPMBUILD.txt

***********************************************************
                        ATTENTION
***********************************************************
Can't create vworker RPM
You may need root privileges to do so...

You will then need an \$HOME/.rpmmacros file.
This file has been created for you here : 
  $CONFDIR/rpmmacros-worker

You can invoke rpmbuild :

$> cp -f $CONFDIR/rpmmacros-vworker \$HOME/.rpmmacros
$> rpmbuild --buildroot $INSTALLERSDIR/linux/rpm/xwhep.vworker/BUILD/xwhep-vworker-$VERSION -bb $INSTALLERSDIR/linux/rpm/xwhep.vworker/xwhep-worker.spec

The RPM is then ready in :
  $INSTALLERSDIR/linux/rpm/xwhep.vworker/RPMS/noarch/

EOF
		cat $INSTALLERSDIR/linux/rpm/xwhep.vworker/RPMBUILD.txt
		if [ "$FORCEYES" = "NO"  ] ; then
			printf "(Hit Enter key) "
			read
		fi
    fi

    [ -f $HOME/.rpmmacros_sav ] && mv $HOME/.rpmmacros_sav $HOME/.rpmmacros 
fi





cat <<EOF

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
! Everything is now prepared !
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

Available packages :
  * server
   - RedHat RPM  in $INSTALLERSDIR/linux/rpm/xwhep.server
   - Debian DPKG in $INSTALLERSDIR/linux/dpkg/xwhep.server
   - Apple  PKG  in $INSTALLERSDIR/macosx/xwhep.server

  * Desktop Grid to Service Grid bridge
   - RedHat RPM  in $INSTALLERSDIR/linux/rpm/xwhep.bridgedgsg
   - Debian DPKG in $INSTALLERSDIR/linux/dpkg/xwhep.bridgedgsg

  * Service Grid to Desktop Grid bridge
   - RedHat RPM  in $INSTALLERSDIR/linux/rpm/xwhep.bridgesgdg
   - Debian DPKG in $INSTALLERSDIR/linux/dpkg/xwhep.bridgesgdg

  * client
   - RedHat RPM  in $INSTALLERSDIR/linux/rpm/xwhep.client
   - Debian DPKG in $INSTALLERSDIR/linux/dpkg/xwhep.client
   - Apple  PKG  in $INSTALLERSDIR/macosx/xwhep.client
   - Windows installer  in $INSTALLERSDIR/win32/xwhep.client/innoSetup
                        (http://www.innosetup.com/isinfo.php)

  * worker
   - RedHat  RPM        in $INSTALLERSDIR/linux/rpm/xwhep.worker
   - Debian  DPKG       in $INSTALLERSDIR/linux/dpkg/xwhep.worker
   - Apple   PKG        in $INSTALLERSDIR/macosx/xwhep.worker
   - Windows installer  in $INSTALLERSDIR/win32/xwhep.worker/innoSetup
                        (http://www.innosetup.com/isinfo.php)

  * client
   - Zip file (platform independant)  in $INSTALLERSDIR/xwhep-client-$VERSION.zip


You can manually :
  * start the server
   - $BINDIR/xwhep.server console
  * start a worker
   - $BINDIR/xwhep.worker console
  * as soon as your server is started you can use the client
   - $BINDIR/xwworkers : if you have started a worker, it is in the list
   - $BINDIR/xwusers
   - $BINDIR/xwapps
   - etc.

As soon as everything is ok you should :
  * install you server using its packages
  * deploy worker over your own volunteer PCs using its packages
  * install your worker packages on any of your web sites
    if you wish to enable anonymous volunteer power
  * install your client ZIP file on any of your web sites
    to allow registered users to use the platform

That's all folks

EOF


##################################################
# EOF
##################################################
