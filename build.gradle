apply plugin: 'java-library'

repositories {
    mavenCentral()
}

dependencies {

    compile "org.bouncycastle:bcprov-jdk15on:1.51"
    compile "org.bouncycastle:bcpkix-jdk15on:1.51"
    compile "org.eclipse.jetty:jetty-maven-plugin:9.3.8.v20160314"
    compile "com.auth0:java-jwt:3.2.0"
    compile "com.github.scribejava:scribejava-apis:3.3.0"
    compile "commons-fileupload:commons-fileupload:1.2"
    compile "commons-httpclient:commons-httpclient:3.0.1"
    compile "org.expressme:JOpenId:1.08"
    compile "javax.mail:mail:1.4.7"
    compile "bouncycastle:bcprov-jdk16:140"
    compile "antlr:antlr:2.7.2"// ? https://mvnrepository.com/artifact/antlr/antlr
    compile "org.json:json:20160810" // ? https://mvnrepository.com/artifact/org.json/json

    api 'org.apache.commons:commons-math3:3.6.1'

    implementation 'com.google.guava:guava:23.0'

    testImplementation "junit:junit:4.12"
    testImplementation "org.assertj:assertj-core:3.8.0"

    // external files
    compile files('libXtremWeb/smartsockets-1.4.jar')
}

import org.apache.tools.ant.filters.ReplaceTokens
import java.time.Instant

ant.importBuild 'jni.xml'
processResources.dependsOn jni

task createVersion(type: Copy) {
    // delete old one
    delete 'src/main/java/xtremweb/common/CommonVersion.java'
    // use and copy template to the new location
    from 'src/main/java/xtremweb/common/CommonVersion.java.in'
    into 'src/main/java/xtremweb/common'

	// remove the '.in' extension
    rename { String fileName ->
        fileName.replace('.in', '')
    }

    // replace tokens in the template file
    filter(ReplaceTokens, tokens: [BUILD_TIME	: Instant.now().toString(),
                                   XWVERSION	: "${version}".toString(),
                                   VBRANCH		: 'git rev-parse --abbrev-ref HEAD'.execute().text.trim()
	])
}

// the createVersion task should be called before compileJava
compileJava.dependsOn createVersion

jar {
    exclude("doc/**")
}

// task that creates a big jar that includes all dependencies
// this will probably be removed once we switch to spring boot
task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Gradle Jar File Example',
                'Implementation-Version': version,
                'Main-Class': 'xtremweb.dispatcher.Dispatcher xtremweb.common.HTTPLauncher xtremweb.client.Client'
    }
    exclude("doc/**")
    baseName = project.name + '-all-dependencies'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

build.dependsOn fatJar

def PROJECT_TAG = project.name + '-' + version

def root = '.'
def build = root + '/build'
def buildClasses = build + '/classes'
def libXtremWeb = root + 'libXtremWeb'
def src = root + '/src'
def java = src + '/main/java/xtremweb'
def c = src + '/main/natif/xtremweb/archdep'
def resources = src + '/main/resources'
def benchmark = resources + '/benchmark'
def templates = resources + '/templates'
def doc = resources + '/doc'
def docker = resources + '/docker'
def installers = resources + '/installers'
def misc = resources + '/misc'
def scripts = resources + '/scripts'
def wrapper = resources + '/wrapper'
def linuxInstallers = installers + '/linux'
def rpm = installers + '/linux/rpm'
def dpkg = installers + '/linux/dpkg'
def opt = '/opt'
def dist = build + '/dist/' + PROJECT_TAG
def distlib = dist + '/lib'
def distdoc = dist + '/doc'
def distresources = dist + '/resources'
def distBin = dist + '/bin'
def distKeystore = dist + '/keystore'
def distLib = dist + '/lib'
def distInstallers = dist + '/installers'
def distLinux = distInstallers + '/linux'

import org.apache.tools.ant.filters.ReplaceTokens

task copyBenchmark(type: Copy) {
    from(benchmark + '/apptest')
    into(dist + '/benchmark/apptest')
}

task copyDoc(type: Copy) {
    from doc
    into dist + '/doc'
    include('*.png')
    include('xtremweb.html')
}

task copyDocker (type: Copy) {
    from docker
    into dist + '/docker'
}

task copyResources(type: Copy) {
    from resources
    into dist + '/resources'
    include('log4j.xml')
}

task copyLib(type: Copy){
    from libXtremWeb
    into dist + "/lib"
}

task copyServerConf(type: Copy){
    from templates + '/xtremweb.server.conf.in'
    into dist + "/conf"
    rename { fileName -> fileName.replace('.in', '') }
}

task copyClientConf(type: Copy){
    from templates + '/xtremweb.client.conf.in'
    into dist + '/conf'
    rename { fileName -> fileName.replace('.in', '.template') }
}

task copyClientConf2(type: Copy){
    from templates + '/xtremweb.client.conf.in'
    into dist + '/conf'
    rename { fileName -> fileName.replace('.in', '') }
    filter(ReplaceTokens, tokens:[LAUNCHERURL: 'http://nohost/'])
}

task copyWorkerConf(type: Copy) {
    from templates + '/xtremweb.worker.conf.in'
    into dist + '/conf'
    rename { fileName -> fileName.replace('.in', '') }
    filter(ReplaceTokens, tokens: [LAUNCHERURL: 'http://nohost/',
                                   LOGIN: '${xtremweb.worker.login}',
                                   PASSWORD: '${xtremweb.worker.password}'])
}

task copyWorkerConf2(type: Copy){
    from templates + '/xtremweb.worker.conf.in'
    into dist + '/conf'
    rename {fileName -> fileName.replace('xtremweb.worker.conf.in', 'xtremweb.vworker.conf') }
    filter(ReplaceTokens, tokens: [LAUNCHERURL: 'http://nohost/',
                                   LOGIN: '${xtremweb.vworker.login}',
                                   PASSWORD: '${xtremweb.vworker.password}'])
}

task copyScripts(type: Copy) {
    from(scripts)
    into(distBin)
    exclude('xwconfigure')
    exclude('/db-maintenance/xwsetversion.sql.in')
    filter(ReplaceTokens, tokens: [
            prefix: dist,
            datadir: '../data',
            exec_prefix: '.',
            PACKAGE: project.name,
            KEYPASSPHRASE: '${xw.keypassphrase}',
            KEYSERVERPASSWORD: '${xw.server.keypassword}',
            KEYWORKERPASSWORD: '${xw.worker.keypassword}',
            KEYCLIENTPASSWORD: '${xw.client.keypassword}',
            sysconfdir: '../conf',
            INSTALLDIR: dist,
            DEFAULTUSER: '${xtremweb.admin.login}',
            DEFAULTPASSWORD: '${xtremweb.admin.password}',
            WORKERUSER: '${xtremweb.worker.login}',
            WORKERPASSWORD: '${xtremweb.worker.password}',
            VWORKERUSER: '${xtremweb.vworker.login}',
            VWORKERPASSWORD: '${xtremweb.vworker.password}',
    ])
}

task copyXwconfigure(type: Copy) {
    from(scripts)
    include('xwconfigure')
    filter(ReplaceTokens, tokens: [XWVERSION: version, INSTALLDIR: opt], beginToken : '%', endToken : '%')
    into(distBin)
}

task copyXwsetversion(type: Copy) {
    from(scripts + '/db-maintenance')
    rename('xwsetversion.sql.in', 'xwsetversion.sql')
    filter(ReplaceTokens, tokens: [XWVERSION: version])
    into(distBin + '/db-maintenance')
}

task chmodBin(type: Exec) {
    dependsOn(copyScripts, copyXwconfigure, copyXwsetversion)
    commandLine("sh", "-c",
            "chmod -R 755 " + distBin + " && " +
                    "find " + distBin + " -iname *.sql* -exec chmod -x {} +" + " && " +
                    "find " + distBin + " -iname *.seds -exec chmod -x {} +" + " && " +
                    "find " + distBin + " -iname *.bat -exec chmod -x {} +" + " && " +
                    "find " + distBin + " -iname *.xmls -exec chmod -x {} +"
    )
}

task install(type: Copy) {
    from linuxInstallers
    into dist + '/installers/linux'
    filter(ReplaceTokens, tokens: [XWVERSION: "${version}".toString(),
                                   SYSTEMUSER: 'xwhep'])
}

install.dependsOn(copyBenchmark, copyDoc, copyDocker, copyResources, copyLib,
        copyServerConf, copyClientConf, copyClientConf2, copyWorkerConf, copyWorkerConf2, chmodBin)