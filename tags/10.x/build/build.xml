<?xml version="1.0" encoding="UTF-8"?>

<!--
 * Copyrights     : CNRS
 * Author         : Oleg Lodygensky
 * Acknowledgment : XtremWeb-HEP is based on XtremWeb 1.8.0 by inria : http://www.xtremweb.net/
 * Web            : http://www.xtremweb-hep.org
 * 
 *      This file is part of XtremWeb-HEP.
 *
 *    XtremWeb-HEP is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation, either version 3 of the License, or
 *    (at your option) any later version.
 *
 *    XtremWeb-HEP is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with XtremWeb-HEP.  If not, see <http://www.gnu.org/licenses/>.
 *
-->

<!-- <!DOCTYPE project SYSTEM "ant.dtd" > -->
<!--    build.xml - Ant build file for the XWHEP sources
        created Mon Mar 25 2002 by Samuel Heriard
 -->
<project basedir=".." default="all" name="xwhep">
  

  <!-- NAMES -->
  <property name="project" value="xwhep" />
  <property name="JARFILE" value="xtremweb.jar" />
  
   <!-- DIRECTORIES -->
  <property name="misc.dir" value="${basedir}/misc" />
	  <property name="src.dir" value="${basedir}/src" />
	  <property name="src.test.dir" value="${basedir}/test" />
	  <property name="src.java.dir" value="${src.dir}/xtremweb" />
	  <property name="src.java.test.dir" value="${src.test.dir}/xtremweb" />
  <property name="src.c.dir" value="${src.dir}/natif" />
  <property name="src.scripts.dir" value="${src.dir}/scripts" />
  <property name="lib.dir" value="${basedir}/classes" />
  <property name="build.dir" value="${basedir}/build" />
  <property name="installers.dir" value="${basedir}/installers" />
  <property name="build.classes" value="${build.dir}/classes" />
  <property name="rpm.dir" value="${build.dir}/rpm" />
  <property name="xwidl.dir" value="${src.java.dir}/XwIDL" />
  <property name="antlr.dir" value="${src.java.dir}/antlr" />

  <!-- BUILD CONFIG -->
  <target name="configure" depends="version" >
	<!-- <splash /> --> 
 
    <property environment="localEnv" />

    <property file="${build.dir}/build.conf" />
    <!-- defaults -->
    <property name="target.os" value="${os.name}" />

    <!-- NEED TO CHANGE THE VERSION ? -->
    <condition property="version.changed">
      <or>
        <not><available file="${build.dir}/.build" /></not>
        <not>
          <uptodate targetfile="${build.dir}/.build">
            <srcfiles dir="${build.dir}" includes="VERSION" />
            <srcfiles dir="${src.java.dir}/common" includes="*" />
            <srcfiles dir="${src.java.test.dir}/" includes="**" />
            <srcfiles dir="${src.java.dir}/communications" includes="*" />
            <srcfiles dir="${src.java.dir}/dispatcher" includes="*" />
            <srcfiles dir="${src.java.dir}/archdep" includes="*" />
	    <srcfiles dir="${src.java.dir}/exec" includes="*" />
            <srcfiles dir="${src.java.dir}/worker" includes="*" />
            <srcfiles dir="${src.java.dir}/services" includes="*" />
            <srcfiles dir="${src.java.dir}/dispatcher" includes="*" />
          </uptodate>
        </not>
      </or>
    </condition>
    
    
    <!-- else parameter needs ant 1.6.3 minimum -->
    <condition property="compiler" value="classic" else="modern">
      <or>
        <equals arg1="${ant.java.version}" arg2="1.1" />
        <equals arg1="${ant.java.version}" arg2="1.2" />
      </or>
    </condition>
    <!--
	<condition property="compiler" value="modern">
	  <or>
            <equals arg1="${ant.java.version}" arg2="1.3">
            </equals>
            <equals arg1="${ant.java.version}" arg2="1.4">
            </equals>
            <equals arg1="${ant.java.version}" arg2="1.5">
            </equals>
            <equals arg1="${ant.java.version}" arg2="1.6">
            </equals>
	  </or>
	</condition>
	-->
    
    <condition property="xwarch" value="ix86">
      <or>
        <equals arg1="${os.arch}" arg2="i86" />
        <equals arg1="${os.arch}" arg2="x86" />
        <equals arg1="${os.arch}" arg2="ix86" />
        <equals arg1="${os.arch}" arg2="i386" />
        <equals arg1="${os.arch}" arg2="x386" />
        <equals arg1="${os.arch}" arg2="ix386" />
        <equals arg1="${os.arch}" arg2="i486" />
        <equals arg1="${os.arch}" arg2="x486" />
        <equals arg1="${os.arch}" arg2="ix486" />
        <equals arg1="${os.arch}" arg2="i586" />
        <equals arg1="${os.arch}" arg2="x586" />
        <equals arg1="${os.arch}" arg2="ix586" />
        <equals arg1="${os.arch}" arg2="i686" />
        <equals arg1="${os.arch}" arg2="x686" />
        <equals arg1="${os.arch}" arg2="ix686" />
      </or>
    </condition>

    <condition property="xwarch" value="amd64">
      <equals arg1="${os.arch}" arg2="amd64" />
    </condition>

    <condition property="xwarch" value="x86_64">
      <equals arg1="${os.arch}" arg2="x86_64" />
    </condition>

    <condition property="xwsuffix" value="linux-${xwarch}">
      <equals arg1="${target.os}" arg2="Linux" />
    </condition>
    <condition property="xwsuffix" value="solaris-sparc">
      <equals arg1="${target.os}" arg2="SunOS" />
    </condition>
    <condition property="xwsuffix" value="FreeBSD-${xwarch}">
      <equals arg1="${target.os}" arg2="FreeBSD" />
    </condition>
    <condition property="xwsuffix" value="macosx-${xwarch}">
      <equals arg1="${target.os}" arg2="Mac OS X" />
    </condition>
    <condition property="xwsuffix" value="win32-${xwarch}">
      <or>
        <equals arg1="${target.os}" arg2="Windows NT" />
        <equals arg1="${target.os}" arg2="Windows 2000" />
        <equals arg1="${target.os}" arg2="Windows XP" />
      </or>
    </condition>

    <property name="dist.dir" value="${build.dir}/dist/${ant.project.name}-${version}" />
    <property name="dist.bin.dir" value="${dist.dir}/bin" />
    <property name="dist.lib" value="${dist.dir}/lib" />
    <property name="dist.doc" value="${dist.dir}/doc" />
    
    <echo>
      ant version = ${ant.version}

      os         = ${os.name}
      os.arch    = ${os.arch}
      target     = ${target.os}
      xwarch     = ${xwarch}
      xwsuffix   = ${xwsuffix}
      debug      = ${debug}
      debuglevel = ${debuglevel}

        cross=${cross.prefix}
        target java home =${cross.java.home}
    	target           =${target.os}
    	xwversion=${version}
</echo>

  </target>
  
  <target  name="tstamp">
    <property file="${build.dir}/VERSION" prefix="v." />
    <tstamp>
      <format pattern="yyyyMMddHHmm" property="v.build" />
    </tstamp>
    <echoproperties prefix="v." />
    <echoproperties prefix="v." destfile="${build.dir}/.build" /> 
  </target>
  
  <!-- there is a problem if CommonVersion.java was removed while the version
       has not changed -->
  <target name="templates" depends="version" >
    
    <filter token="BUILD_TIME" value="${v.build}" />
    <filter token="XWVERSION" value="${v.rev}" />
    <filter token="VBRANCH" value="${v.branch}" />   
    <filter token="ADMINUSER" value="${xtremweb.admin.login}" />
    <copy file="${src.java.dir}/common/CommonVersion.java.in" 
	  filtering="yes" overwrite="yes" tofile="${src.java.dir}/common/CommonVersion.java" />
    <filter token="KEYPASSPHRASE" value="${xw.keypassphrase}" />
    <filter token="KEYSERVERPASSWORD" value="${xw.server.keypassword}" />
    <filter token="SMTPHOST" value="${smtp.host}" />
    <filter token="ALIVEPERIOD" value="${alive.period}" />
    <filter token="DEFAULTUSER" value="${xtremweb.admin.login}"/>
    <checksum file="${build.dir}/build.conf" property="xtremweb.admin.password.coded" />
    <filter token="DEFAULTPASSWORD" value="${xtremweb.admin.password.coded}"/>
    <checksum file="${build.dir}/build.xml" property="xtremweb.admin.password.coded2" />
    <filter token="DEFAULTPASSWORD2" value="${xtremweb.admin.password.coded2}"/>
  </target>

  
  <target depends="tstamp" name="version" >
    <property file="${build.dir}/.build" />    
    <property name="v.rev" value="${v.major}.${v.minor}.${v.micro}" />
    <property name="version" value="${v.rev}" />
    <!--
	<property name="version" value="${v.rev}-${v.branch}-${v.build}" />
	-->
  </target>

  <property file="${build.dir}/build.conf" /> 
  
  
  <target name="xwidl" description="Preprocess the .idl files">
    
    <condition property="xwidl.opts.arg" value="${xwidl.opts}">
      <isset property="xwidl.opts" />
    </condition>
    
    <condition property="xwidl.opts.arg" value="">
      <not>
        <isset property="xwidl.opts" />
      </not>
    </condition>
    
    <path id="p.xwidl.files"> 
      <fileset id="id.xwidl.files" dir="${src.java.dir}">
        <include name="**/*.idl" />
      </fileset>
    </path>
    
    <property name="xwidl.files" refid="p.xwidl.files" />
    
    <exec dir="${xwidl.dir}" executable="perl" 
          failonerror="true" os="Linux, Mac OS X" >
      <arg line="${build.dir}/XwIDL" />
      <arg line="-ant-Linux" />
      <arg line="${xwidl.opts.arg} " />
      <arg path="${xwidl.files}" />
    </exec>
    <exec dir="${xwidl.dir}" executable="perl" 
          failonerror="true" os="Windows 2000, Windows XP">
      <arg line="${build.dir}/XwIDL" />
      <arg line="-ant-Windows" />
      <arg line="${xwidl.opts.arg} " />
      <arg path="${xwidl.files}" />
    </exec>
    
    <echo>
      processing  ${xwidl.files}
    </echo>
  </target> 
  
  <target name="antlr" description="Preprocess antlr grammar">
    
    <path id="p.antlr.files"> 
      <fileset id="id.antlr.files" dir="${src.java.dir}">
        <include name="**/*.g" />
        <exclude name="xtremweb/**/*.g" />
      </fileset>
    </path>
    
    <property name="antlr.files" refid="p.antlr.files" />

    <antlr target="${antlr.dir}/method.g"
           outputdirectory="${src.java.dir}/worker">
      <classpath>
        <pathelement location="${lib.dir}/antlr.jar" />
      </classpath>

    </antlr>

    <echo>
     processed  ${antlr.files}
    </echo>
  </target> 

  <target depends="configure,version,templates" name="prepare">
    <!-- MAKE THE DIRECTORIES IF NEEDED -->
    <mkdir dir="${build.dir}" />
    <mkdir dir="${dist.dir}" />
    <mkdir dir="${dist.bin.dir}" />
    <mkdir dir="${build.classes}" />
    <mkdir dir="${build.classes}/obj" />
    <mkdir dir="${build.classes}/obj/${xwsuffix}" />
    <mkdir dir="${build.classes}/jni" />
    <mkdir dir="${build.classes}/xwclasses" />
    <mkdir dir="${dist.lib}" />
    <mkdir dir="${dist.doc}" />

  <!-- CLASSPATH FOR COMPILATION -->
    <path id="project.classpath">
        <pathelement path="${src.dir}" />
        <pathelement path="${src.test.dir}" />
      <pathelement path="${build.classes}" />
      <fileset dir="${lib.dir}">
        <include name="*.jar" />
      </fileset>
    </path>
    <property name="classpath" refid="project.classpath" />

    <echo>
      classpath=${classpath}
    </echo>

  </target>    
  
  <target name="prepare_install" >
    <mkdir dir="${install.dir}" />
    <mkdir dir="${install.dir}/bin" />
    <mkdir dir="${install.dir}/etc" />
    <mkdir dir="${install.dir}/share" />
    <mkdir dir="${install.dir}/share/${project}" />
    <mkdir dir="${install.dir}/share/${project}/classes" />
    <mkdir dir="${install.dir}/share/${project}/keystore" />
    <mkdir dir="${install.www.dir}" />
  </target>

  
  <!-- XTREMWEB CLASSES -->
  <target depends="prepare, xwidl" name="XwIDL">
    <javac compiler="${compiler}"  classpath="${classpath}" 
	   debug="${debug}"
		debuglevel="${debuglevel}"
    	includeAntRuntime="false"
    	destdir="${build.classes}"
	   srcdir="${src.java.dir}"
	   source="1.6"
	   deprecation="on">
      <patternset>
        <include name="XwIDL/**/*.java" />
      </patternset>
    </javac>
  </target>

  <target depends="" name="obj">
    <javac compiler="${compiler}" 
	   classpath="${classpath}"
	   debug="${debug}"
		debuglevel="${debuglevel}"
    	includeAntRuntime="false"
	   destdir="${build.classes}"
	   srcdir="${src.java.dir}"
	   source="1.6"
	   deprecation="on">
      <patternset>
        <include name="obj/**/*.java" />
      </patternset>
    </javac>
  </target>
  
  <target depends="obj" name="iface">
    <javac compiler="${compiler}" 
	   classpath="${classpath}"
	   debug="${debug}"
		debuglevel="${debuglevel}"
    	includeAntRuntime="false"
	   destdir="${build.classes}"
	   srcdir="${src.java.dir}"
	   source="1.6"
	   deprecation="on">
      <patternset>
        <include name="iface/**/*.java" />
      </patternset>
    </javac>
  </target>
  

<!--
  <target depends="iface,XwIDL" name="common">
    -->
  <target depends="prepare" name="common">
    <javac compiler="${compiler}"
           classpath="${classpath}" 
	   debug="${debug}"
		debuglevel="${debuglevel}"
    	includeAntRuntime="false"
	   destdir="${build.classes}"
	   srcdir="${src.java.dir}"
	   source="1.6"
	   deprecation="on">
      <patternset>
        <include name="**/*.java" />
        <exclude name="chkpt/*.java" />
        <exclude name="mpi/*.java" />
        <exclude name="rpcv/*.java" />
        <exclude name="wctrl/*.java" />
      </patternset>
    </javac>
  </target>
  
  <target depends="iface" name="communications">
    <javac compiler="${compiler}"  
	   classpath="${classpath}" 
	   debug="${debug}" 
		debuglevel="${debuglevel}"
    	includeAntRuntime="false"
	   destdir="${build.classes}" 
	   srcdir="${src.java.dir}"
	   source="1.6"
	   deprecation="on">
      <patternset>
        <include name="communications/**/*.java" />
      </patternset>
    </javac>
  </target>
  
  <target depends="iface" name="services">
    <javac compiler="${compiler}"  
	   classpath="${classpath}" 
	   debug="${debug}" 
		debuglevel="${debuglevel}"
    	includeAntRuntime="false"
	   destdir="${build.classes}" 
	   srcdir="${src.java.dir}"
	   source="1.6"
	   deprecation="on">
      <patternset>
        <include name="services/**/*.java" />
      </patternset>
    </javac>
  </target>



  <target depends="prepare,archdep" name="jni">
    <!-- generate jni headers -->
<!--
 If, for any reason, javah task is not available comment these 6 next lines
and try the following exec tasks
(I have such a problem when compiling under amd64... I don't know why)
-->
    <javah class="xtremweb.archdep.PortMapper"
	   classpath="${classpath}" 
	   outputfile="${src.c.dir}/PortMapper.h" />
    <javah class="xtremweb.archdep.XWUtilImpl" 
	   classpath="${classpath}" 
	   outputfile="${src.c.dir}/XWUtilImpl.h" />
    <javah class="xtremweb.archdep.XWTracerImpl"
	   classpath="${classpath}" 
	   outputfile="${src.c.dir}/XWTracerImpl.h" />
    <javah class="xtremweb.archdep.XWInterruptsWin32" 
	   classpath="${classpath}" 
	   outputfile="${src.c.dir}/XWInterruptsImpl.h" />
    <javah class="xtremweb.archdep.WinSaver"
	   classpath="${classpath}" 
	   outputfile="${src.c.dir}/WinSaver.h" />
    <javah class="xtremweb.archdep.MacSaver" 
	   classpath="${classpath}" 
	   outputfile="${src.c.dir}/MacSaver.h" />
    
<!--
 If, for any raison, javah task is not available comment these 6 previous javah tasks
and try the 6 following exec tasks
(I have such a problem when compiling under amd64... I don't know why)
-->
<!--
    <exec dir="${src.c.dir}" executable="javah" failonerror="true">
      <arg line="-classpath ${classpath} -o ${src.c.dir}/PortMapper.h xtremweb.archdep.PortMapper" />
		</exec>
    <exec dir="${src.c.dir}" executable="javah" failonerror="true">
      <arg line="-classpath ${classpath} -o ${src.c.dir}/XWUtilImpl.h xtremweb.archdep.XWUtilImpl" />
		</exec>
    <exec dir="${src.c.dir}" executable="javah" failonerror="true">
      <arg line="-classpath ${classpath} -o ${src.c.dir}/XWTracerImpl.h xtremweb.archdep.XWTracerImpl" />
		</exec>
    <exec dir="${src.c.dir}" executable="javah" failonerror="true">
      <arg line="-classpath ${classpath} -o ${src.c.dir}/XWInterruptsImpl.h xtremweb.archdep.XWInterruptsWin32" />
		</exec>
    <exec dir="${src.c.dir}" executable="javah" failonerror="true">
      <arg line="-classpath ${classpath} -o ${src.c.dir}/WinSaver.h xtremweb.archdep.WinSaver" />
		</exec>
    <exec dir="${src.c.dir}" executable="javah" failonerror="true">
      <arg line="-classpath ${classpath} -o ${src.c.dir}/MacSaver.h xtremweb.archdep.MacSaver" />
		</exec>
-->

    <copy todir="${src.c.dir}"
          filtering="no" overwrite="yes">
      <fileset dir="${misc.dir}">
        <include name="**/*.ico" />
      </fileset>
    </copy>

    <!-- make install must copy the files (jni shared libraries) in ${dist.lib} -->
    <exec dir="${src.c.dir}" executable="make" failonerror="true">
      <arg line="-f &apos;${build.dir}/natif.mk&apos; install" />
      <env key="XWSUFFIX" value="${xwsuffix}" />
      <env key="XWARCH"   value="${xwarch}" />
      <env key="TARGET"   value="${target.os}" />
      <env key="CROSS"    value="${cross.prefix}" />
      <env key="TARGET_JAVA_HOME" value="${cross.java.home}" />
      <env key="XWVERSION" value="${version}" />
    </exec>
  </target>

  <!-- NATIVE CLASSES -->
  <target depends="prepare,common" name="archdep">
    <javac compiler="${compiler}"  
	   classpath="${classpath}" 
	   debug="${debug}" 
		debuglevel="${debuglevel}"
    	includeAntRuntime="false"
	   destdir="${build.classes}" 
	   srcdir="${src.java.dir}"
	   source="1.6"
	   deprecation="on">
      <patternset><include name="archdep/**" /></patternset> 
    </javac>
  </target>
  
	  <!-- TEST CLASSES -->
	  <target name="tests"
		  depends="common,communications,services,upgrade,iface" >
	    <javac compiler="${compiler}"  
		   classpath="${classpath}" 
		   debug="${debug}" 
			debuglevel="${debuglevel}"
	    	includeAntRuntime="false"
		   destdir="${build.classes}" 
		   srcdir="${src.java.test.dir}"
		   source="1.6"
		   deprecation="on">
	      <patternset>
	        <include name="**" />
	      </patternset>
	    </javac>
	  </target>

	<!-- DISPATCHER CLASSES -->
  <target name="dispatcher"
	  depends="common,communications,services,upgrade,iface" >
    <javac compiler="${compiler}"  
	   classpath="${classpath}" 
	   debug="${debug}" 
		debuglevel="${debuglevel}"
    	includeAntRuntime="false"
	   destdir="${build.classes}" 
	   srcdir="${src.java.dir}"
	   source="1.6"
	   deprecation="on">
      <patternset>
        <include name="dispatcher/**" />
      </patternset>
    </javac>
  </target>



  <!-- WORKER CLASSES -->
  <target name="worker"
	  depends="common,communications,services,archdep,upgrade,obj,iface" >
    <javac compiler="${compiler}"  
	   classpath="${classpath}" 
	   debug="${debug}" 
		debuglevel="${debuglevel}"
    	includeAntRuntime="false"
	   destdir="${build.classes}"
	   srcdir="${src.java.dir}"
	   source="1.6"
	   deprecation="on">
      <patternset>
	<include name="worker/**" />
	<include name="services/**" />
      </patternset>
    </javac>
  </target>

  <!-- XTREMWEB JAR -->
  <!-- rebuild manifest if version has changed -->
  <target depends="prepare" name="worker.manifest" >
    <manifest file="${build.classes}/xwclasses.mf" >
        <attribute name="Main-Class" value="xtremweb.worker.Worker" />
        <attribute name="Class-Path" value="jsse.jar MinML.jar" />
        <attribute name="XW-rev" value="${v.rev}" />
        <attribute name="XW-branch" value="${v.branch}" />
        <attribute name="XW-build" value="${v.build}" />
    </manifest>
  </target>
  

  <!-- WORKER -->
  <target name="Worker" 
	  depends="worker,dispatcher,upgrade,worker.manifest,jni" >
    <patternset id="Worker.patterns">
      <include name="data/**" />
      <include name="xtremweb/services/**" />
      <include name="xtremweb/rpcd/client/**" />
        <include name="xtremweb/common/**" />
      <include name="xtremweb/communications/**" />
      <include name="xtremweb/exec/**" />
      <include name="xtremweb/archdep/**" />
      <include name="xtremweb/worker/**" />
      <include name="xtremweb/upgrade/**" />
      <include name="xtremweb/**/*_Stub*" />
      <include name="xtremweb/rpcd/client/**" />
      <include name="xwclasses.mf" />
    </patternset>
    <patternset id="jni.patterns" >
      <include name="jni/**" />
    </patternset>

    <mkdir dir="${build.classes}/data" />

    <filter token="DISPATCHERS" value="${dispatcher.servers}" />
    <filter token="DATASERVERS" value="${data.servers}" />

    <copy todir="${build.classes}/data"
          filtering="no" overwrite="yes">
      <fileset dir="${misc.dir}">
        <include name="**/*.ico" />
        <include name="**/*.html" />
        <include name="**/*.js" />
        <include name="**/*.css" />
        <include name="**/logo.jpg" />
      </fileset>
    </copy>
  </target>

  
    <target name="client" 
	    depends="common,communications,services,templates" >
      <javac compiler="${compiler}"  
	     classpath="${classpath}" 
	     debug="${debug}" 
		debuglevel="${debuglevel}"
    	includeAntRuntime="false"
	     destdir="${build.classes}" 
	     srcdir="${src.java.dir}"
	     source="1.6"
	     deprecation="on">
        <patternset>
          <include name="data/**" />
          <include name="xtremweb/client/**" />
          <include name="xtremweb/rpcd/client/**" />
	</patternset>
      </javac>
    </target>
    

   <!-- CLIENT -->
    <target name="rpcd"
	    depends="client">
      <javac compiler="${compiler}"  
	     classpath="${classpath}" 
	     debug="${debug}" 
		debuglevel="${debuglevel}"
    	includeAntRuntime="false"
	     destdir="${build.classes}" 
	     srcdir="${src.java.dir}"
	     source="1.6"
	     deprecation="on">
        <patternset>
	  <include name="rpcd/**" />
	</patternset>
      </javac>
    </target>
    

    <target depends="tests,dispatcher,services,client,allservices" name="Dispatcher">

      <echo> 
	JAR JAR JAR
	basedir="${build.classes}"
	jarfile="${dist.lib}/${JARFILE}"
	manifest="${misc.dir}/worker.manifest"
      </echo>
      <jar basedir="${build.classes}"
	   jarfile="${dist.lib}/${JARFILE}"
	   manifest="${misc.dir}/worker.manifest">
	<patternset>
	  <include name="xtremweb/**" />
	</patternset>	  
	<patternset>
	  <include name="data/**" />
	</patternset>	  
	<patternset refid="jni.patterns" />
      </jar>
      
    </target>


  <!-- ALL_SERVICES CLASSES -->
  <target depends="services" name="allservices" />
  

    <!-- RPCV -->
    <target depends="client" name="rpcv">
      <javac compiler="${compiler}"
	     classpath="${classpath}"
	     debug="${debug}" 
		debuglevel="${debuglevel}"
    	includeAntRuntime="false"
	     destdir="${build.classes}" 
	     srcdir="${src.java.dir}"
	     source="1.6"
	     deprecation="on">
        <patternset>
	  <include name="rpcv/**" />
	</patternset>
      </javac>
    </target>


    <!-- MONITOR -->
    <target name="monitor" depends="common" >
      <javac compiler="${compiler}"  
	     classpath="${classpath}" 
	     debug="${debug}" 
		debuglevel="${debuglevel}"
    	includeAntRuntime="false"
	     destdir="${build.classes}" 
	     srcdir="${src.java.dir}"
	     source="1.6"
	     deprecation="on">
        <patternset>
	  <include name="monitor/**" />
	</patternset>
      </javac>
    </target>
    

  <!-- EP Benchmark -->
  
  <target depends="common,dispatcher,client" name="epclient">
    <javac compiler="${compiler}"  
	   classpath="${classpath}" 
	   debug="${debug}" 
		debuglevel="${debuglevel}"
    	includeAntRuntime="false"
	   destdir="${build.classes}" 
	   srcdir="${src.java.dir}"
	   source="1.6"
	   deprecation="on">
      <patternset>
	<include name="EP/**" />
      </patternset>
    </javac>
    </target>
    

    <!-- Upgrade protocol and worker  -->
    <target depends="prepare" name="upgrade">
    <javac compiler="${compiler}"  
	   classpath="${classpath}" 
	   debug="${debug}" 
		debuglevel="${debuglevel}"
    	includeAntRuntime="false"
	   destdir="${build.classes}" 
	   srcdir="${src.java.dir}"
	   source="1.6"
	   deprecation="on">
      <patternset>
        <include name="upgrade/**" />
      </patternset>
    </javac>
    </target>
    
    
    <!-- JAVADOC -->
  <target depends="prepare" name="doc">
    <javadoc classpath="${classpath}"
             private="no"
             protected="yes"
             breakiterator="yes"
             destdir="${dist.doc}"
             version="${version}" >
        <sourcepath path="${src.java.dir}" />
        <sourcepath path="${src.java.test.dir}" />
      <fileset dir="${src.java.dir}">
        <include name="**/*.java" />
      </fileset>
      <package name="xtremweb.client" />
      <package name="xtremweb.client.gui" />
      <package name="xtremweb.archdep" />
      <package name="xtremweb.worker" />
      <package name="xtremweb.dispatcher" />
        <package name="xtremweb.common" />
      <package name="xtremweb.services" />
      <package name="xtremweb.services.rpc" />
      <package name="xtremweb.rpcd.client" />
      <package name="xtremweb.rpcd.server" />
      <package name="xtremweb.communications" />
    </javadoc>
  </target>
  
  <target name="clean" depends="version">
    <delete file="${build.dir}/.build" failonerror="false" />
    <delete dir="${src.java.dir}/iface" includeEmptyDirs="true" failonerror="false" />
    <delete dir="${src.java.dir}/obj" includeEmptyDirs="true" failonerror="false" />
    <delete dir="${dist.dir}" includeEmptyDirs="true" failonerror="false" />
    <delete dir="${build.classes}" includeEmptyDirs="true" failonerror="false" />
    <delete dir="${rpm.dir}/BUILD" includeEmptyDirs="true" failonerror="false" />
    <delete dir="${rpm.dir}/RPMS" includeEmptyDirs="true" failonerror="false" />
    <delete dir="${rpm.dir}/SOURCES" includeEmptyDirs="true" failonerror="false" />
    <delete dir="${rpm.dir}/SPECS" includeEmptyDirs="true" failonerror="false" />
    <delete dir="${rpm.dir}/SRPMS" includeEmptyDirs="true" failonerror="false" />
    <delete file="${installers.dir}/macosx/xwhep.worker/installer/PckRoot/private/etc/xwhep.worker/lib/${JARFILE}" failonerror="false" />
    <delete file="${installers.dir}/macosx/xwhep.worker/installer/PckRoot/private/etc/xwhep.worker/conf/xtremweb.worker.conf" failonerror="false" />
    <delete file="${installers.dir}/macosx/xwhep.worker/installer/PckRoot/private/etc/xwhep.worker/keystore/xwhepworker.keys" failonerror="false" />
  	<delete file="${installers.dir}/macosx/xwhep.client/installer/PckRoot/private/etc/xwhep.client/lib/${JARFILE}" failonerror="false" />
    <delete file="${installers.dir}/macosx/xwhep.client/installer/PckRoot/private/etc/xwhep.client/conf/xtremweb.worker.conf" failonerror="false" />
    <delete file="${installers.dir}/macosx/xwhep.client/installer/PckRoot/private/etc/xwhep.client/keystore/xwhepworker.keys" failonerror="false" />
    <delete dir="${installers.dir}/win32/innoSetup/worker/" includeEmptyDirs="true" failonerror="false" />
    <delete file="${installers.dir}/win32/msi/Worker/conf/xtremweb.worker.conf" failonerror="false" />

    <delete dir="${installers.dir}/xwhep.client/" failonerror="false" />
    <delete file="${installers.dir}/xwhep.client-${version}.zip" failonerror="false" />
    <delete file="${install.www.dir}/download/xwhep.client-${version}.zip" failonerror="false" />

    <delete failonerror="false">
      <fileset dir="${installers.dir}/macosx/xwhep.server/installer/PckRoot/private/etc/xwhep.server/bin">
	<exclude name="*.sh" />
      </fileset>
    </delete>
    <delete file="${installers.dir}/macosx/xwhep.server/installer/PckRoot/private/etc/xwhep.server/conf/xtremweb.server.conf" failonerror="false" />
    <delete file="${installers.dir}/macosx/xwhep.server/installer/PckRoot/private/etc/xwhep.server/keystore/xwhepserver.keys" failonerror="false" />
    <delete includeEmptyDirs="true" failonerror="false">
      <fileset dir="${installers.dir}/macosx/xwhep.server/installer/PckRoot/Applications/xwhep.server/">
	<exclude name="bin/uninstall.sh" />
	<exclude name="bin/start.sh" />
	<exclude name="bin/stop.sh" />
	<include name="**" />
      </fileset>
    </delete>
    <delete includeEmptyDirs="true" failonerror="false">
      <fileset dir="${installers.dir}/macosx/xwhep.server/installer/PckRoot/private/etc/xwhep.server/lib">
	<include name="**" />
      </fileset>
    </delete>

    <delete file="${installers.dir}/win32/xwhep.worker.conf" />
    <delete file="${installers.dir}/win32/msi/Worker/lib/${JARFILE}" failonerror="false" />
    <delete file="${installers.dir}/win32/msi/Worker/conf/xwhep.worker.conf" failonerror="false" />
    <delete file="${installers.dir}/win32/msi/Worker/keystore/xwhepworker.keys" failonerror="false" />
    <delete file="${installers.dir}/win32/msi/Worker/conf/wrapper-worker.conf" failonerror="false" />
    <delete failonerror="false">
      <fileset dir="${installers.dir}/win32/msi/Worker/doc/">
	<include name="*" />
      </fileset>
    </delete>
    <delete failonerror="false">
      <fileset dir="${installers.dir}/win32/msi/Worker/lib/">
	<include name="*" />
      </fileset>
    </delete>
    <delete failonerror="false">
      <fileset dir="${installers.dir}/win32/msi/Worker/bin/">
	<include name="*" />
      </fileset>
    </delete>
    
    <!-- make install must copy the files (jni shared libraries) in ${dist.lib} -->
    <exec dir="${build.dir}/stand-alone" executable="make" failonerror="true">
      <arg line="clean" />
    </exec>
    <exec dir="${src.c.dir}" executable="make">
      <arg line="-f &apos;${build.dir}/natif.mk&apos; clean" />
    </exec>
  </target>
  
  <target name="copylibs">
    <copy todir="${dist.lib}">
      <fileset dir="${lib.dir}"><include name="*.jar" /></fileset>
    </copy>
  </target>
  
  <target depends="Worker,Dispatcher,jni,rpcv,allservices" name="all" />
  <target depends="all,copylibs" name="distrib">
  </target>
  
  <!-- move jar files to the server -->
  <target depends="prepare" if="rinstall.host" name="rinstall">
    <ftp depends="yes" 
	 password="${rinstall.password}" 
	 remotedir="${rinstall.prefix}/share/${project}/classes" 
	 server="${rinstall.host}" userid="${rinstall.login}">
      <fileset dir="${dist.lib}">
	<include name="*.jar" />
      </fileset>
    </ftp>
  </target>
  
  <!-- copy the worker jar in the server database -->
  <target depends="Worker" if="rinstall.host" name="publish" >
    <ftp depends="yes" 
	 password="${rinstall.password}" 
	 remotedir="${rinstall.prefix}/share/${project}/DB/worker/bin"
         server="${rinstall.host}" userid="${rinstall.login}" >
      <fileset dir="${dist.lib}" >
	<include name="${JARFILE}.${version}" />
      </fileset>
    </ftp>
  </target>
  	
	<!--       -->
	<!-- Sonar -->
	<!--       -->
	

	<property name="sonar.root.dir" value="${build.dir}/.sonar" />
	<property name="sonar.reports.dir" value="${build.dir}/sonar-reports" />
	<property name="sonar.jacoco.itReportPath" value="${sonar.reports.dir}/jacoco.exec" />
	<property name="sonar.host.url" value="${sonar.host.url}" />
	<property name="sonar.jdbc.url" value="${sonar.jdbc.url}" />
	<property name="sonar.jdbc.username" value="${sonar.jdbc.username}" />
	<property name="sonar.jdbc.password" value="${sonar.jdbc.password}" />
	<!-- Define the Sonar project properties -->
	<property name="sonar.projectKey" value="xwhep-10.x" />
	<property name="sonar.projectName" value="XtremWeb-HEP" />
	<property name="sonar.projectVersion" value="${version}" />
	<property name="sonar.language" value="java" />
	<property name="sonar.sources" value="${src.dir}" />
	<property name="sonar.binaries" value="${dist.lib}" />
<!--
	<property name="sonar.dynamicAnalysis" value="true" />
-->
	<property name="sonar.dynamicAnalysis" value="reuseReports" />
	
	<property name="junit.reports.dir" value="${sonar.reports.dir}/junit-test" />
	<property name="coverage.reports.dir" value="${sonar.reports.dir}/coverage" />

   	<property name="sonar.surefire.reportsPath" value="${junit.reports.dir}" />
<!--
	<property name="sonar.jacoco.reportPath" value="${coverage.reports.dir}" />
-->
	
	<!-- Define the Sonar target -->

	<target name="sonar-clean">
		<delete dir="${sonar.root.dir}" />
		<delete dir="${sonar.reports.dir}" />
	</target>

	<target name="sonar-init" depends="configure">
		<mkdir dir="${sonar.root.dir}" />
		<mkdir dir="${sonar.reports.dir}" />
		<mkdir dir="${junit.reports.dir}" />
		<mkdir dir="${coverage.reports.dir}" />
	</target>
	
	<target name="sonar" depends="sonar-init">
		 <taskdef name="sonar" 
		         classname="org.sonar.ant.SonarTask" />
	 	    <!-- Execute Sonar -->
	    <sonar />
	</target>


    <!--
    ===================================================================
    TARGET : run the junit tests
    ===================================================================
    -->

 	<target name="junit" description="JUnit4 test suite" depends="sonar-init,prepare">
		 <taskdef name="junit" 
		         classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask" />
	  <junit fork="yes" printsummary="yes" haltonfailure="yes" clonevm="true">
	    <sysproperty key="net.sourceforge.cobertura.datafile" file="cobertura.ser" />
        <jvmarg value="-XX:-UseSplitVerifier"/>
<!-- 
        <jvmarg value="-DLOGGERLEVEL=FINEST"/>
 -->
        <classpath>
  	  	  <pathelement path="${classpath}" />
        </classpath>
        <batchtest fork="yes" todir="${junit.reports.dir}">
          <formatter type="plain" usefile="false" />
          <formatter type="xml" usefile="true" />
          <fileset dir="${src.test.dir}">
            <include name="xtremweb/common/*Test.java" />
            <exclude name="xtremweb/common/TableInterfaceTest.java" />
            <include name="xtremweb/communications/*Test.java" />
            <exclude name="xtremweb/communications/XMLRPCCommandTest.java" />
     	   </fileset>
        </batchtest>
      </junit>
 	</target>

	  <path id="cobertura.classpath">
	    <fileset dir="${lib}">
	        <include name="cobertura.jar" />
	        <include name="asm-3.0.jar" />
	    	<include name="asm-tree-3.0.jar" />
	    	<include name="jakarta-oro-2.0.8.jar" />
	        <include name="log4j-1.2.9.jar" />
	    </fileset>
	  </path>

	<target name="coverage">
      <taskdef name="cobertura-report" 
		       classname="org.sonar.ant.SonarTask" />
	  <cobertura-report format="xml" destdir="${coverage.reports.dir}" >
	      <fileset dir="${src.java.dir}">
	        <include name="**/*.java" />
	      </fileset>
	  </cobertura-report>
	</target>


</project>

